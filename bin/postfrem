#!/usr/bin/perl

# Only for Development
use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

# Perl includes #
use Config;
use strict;
use Getopt::Long;
# External modules #
use Math::Random;
# PsN includes #
use PsN;
use common_options;
use ui;
use Cwd;
use File::Copy qw/cp mv/;
use File::Glob;
use File::Path 'rmtree';
use tool;
use tool::frem;
use tool::sir;
use output;
use linear_algebra;
use array qw(quantile unique);
use math qw(round);
use MooseX::Params::Validate;
# More PsN dependencies included with require further down

my $minimum = 100; 

my %categorytext=();
$categorytext{'SEX'}={1=>'male',2=>'female'}; #hamren
my %units = ('AGE'=> 'years','WGT'=>'kg','WT'=>'kg','LBW'=>'kg','CRCO'=> 'ml/min','CLCR'=> 'ml/min','NEUY'=> 'mg'); #hamren
#my %units = ('AGE'=> 'years','WGT'=>'kg','LBW'=>'kg'); #temp

#FIXME optional input units and categorytexts

my $cmd_line = $0 . " " . join( " ", @ARGV );

my %options;

my %required_options = ('frem_directory:s' => undef,
	);
my %optional_options = ('offset_rawres:i' => undef,
						'in_filter:s' => undef,
						'sir_directory:s' => undef,
	);

my $res = GetOptions( \%options,
					  @common_options::get_opt_strings,
					  keys(%required_options),
					  keys(%optional_options) );

exit unless $res;

if( not defined $options{'frem_directory'} or (not -d $options{'frem_directory'}))  {
	die "must set -frem_directory to existing directory\n";
}
$options{'model'}=$options{'frem_directory'}.'/final_models/model_4.mod';
$options{'frem_dataset'} = $options{'frem_directory'}.'/frem_dataset.dta';

if( defined $options{'sir_directory'} and (-d $options{'sir_directory'}))  {
	$options{'rawres_input'}=$options{'sir_directory'}.'/raw_results_model_4.csv';
	$options{'in_filter'}='resamples.gt.0';
}


my %help_text;

$help_text{Pre_help_message} = <<'EOF';
Postprocessing for frem
EOF
$help_text{Description} = <<'EOF';
   model plus raw_results from sir
EOF
$help_text{Options} = <<'EOF';

The following options are valid:
EOF
$help_text{Examples} = <<'EOF';
postfrem -model=model_4.mod rawres_input=raw_results_model_4.mod -in_filter=resamples.gt.0
EOF
$help_text{-offset_rawres} = <<'EOF';
      -offset_rawres=N

      Default is 1, i.e. first line is minimum. Do not set to 0.
EOF
$help_text{-in_filter} = <<'EOF';
      -in_filter=comma-separated list of conditions

    Default not used.
	If full sir run then set to resamples.gt.0, otherwise skip.
EOF

common_options::online_help('postfrem', \%options,\%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'postfrem' ); #calls set_globals etc, initiates random sequence

require model;

## Set the automatic renaming of modelfit directory

my $main_directory = tool::get_rundir(create => 1,
				  basename => 'postfrem',
				  modelname => $options{'model'},
				  directory_option => $options{'directory'});

my @outputfiles;


my $eval_string = common_options::model_parameters(\%options);

if( scalar @ARGV > 0 ) {
  die "missing -optionsname?\n";
}
if( not defined $options{'model'})  {
  die "must set -model\n";
}

if( not defined $options{'frem_dataset'})  {
  die "must set -frem_dataset\n";
}


my $model = model -> new ( eval( $eval_string ),
			  filename                    => $options{'model'},
			  ignore_missing_output_files => 1 );

my $sampled_params_arr;
my $match_labels;
if( defined $options{'rawres_input'})  {
	my ($center_params_arr,$href2) = model::get_rawres_params(filename => $options{'rawres_input'},
															  filter => [],
															  offset => 0,
															  only_first_match => 1,
															  model => $model);
	if (defined $center_params_arr and scalar(@{$center_params_arr} == 1)){
		$model -> update_inits(from_hash => $center_params_arr->[0]);		
	}else{
		croak("error reading center estimates from sir raw results file");
	}
	$match_labels=1;

}else{
	$match_labels=0;
	#i.e. did not set sir_directory
	#check if have covstep of model 4
	print "No sir directory given, trying to use covariance step results from frem model_4\n";
	unless (defined $model->outputs and defined $model->outputs->[0]){
		die "No output from model_4 in frem directory";
	}
	$model->update_inits( from_output => $model->outputs->[0],
						  ensure_posdef => 0,
						  ignore_missing_parameters => 0,
						  update_fix => 0);

	my $covmatrix = tool::sir::get_nonmem_covmatrix(output => $model->outputs->[0]);
	if (defined $covmatrix ){
		my $err = tool::sir::check_matrix_posdef(matrix => $covmatrix);
		if ($err == 1){
			croak("\nERROR: covariance matrix is numerically not positive definite\n".
				  "(as checked with Cholesky decomposition without pivoting). Cannot proceed.\n");
		}
	}else{
		die "No covmatrix, cannot proceed\n";
	}
	my $parameter_hash = output::get_nonmem_parameters(output => $model->outputs->[0]);
	my $message = "Sampling from the truncated multivariate normal distribution";
	print $message."\n";
	my $mu_values= $parameter_hash->{'values'};
	
	my $mat = new Math::MatrixReal(1,1);
	my $muvector = $mat->new_from_rows( [$mu_values] );
	my ($vectorsamples,$boxcox_samples) = tool::sir::sample_multivariate_normal(
		check_cholesky_reparameterization => 0,
		fix_theta_labels => [],
		fix_theta_values => [],
		samples=>1000,
		labels => $parameter_hash->{'labels'},
		covmatrix => $covmatrix,
		inflation => [],
		adjust_blocks => 0,
		lower_bound => $parameter_hash->{'lower_bounds'},
		upper_bound => $parameter_hash->{'upper_bounds'},
		param => $parameter_hash->{'param'},
		coords => $parameter_hash->{'coords'},
		block_number => $parameter_hash->{'block_number'},
		choleskyform => $parameter_hash->{'choleskyform'},
		mu => $muvector,
		lambda => [],
		delta => []);
		
		$sampled_params_arr = tool::sir::create_sampled_params_arr(samples_array => $vectorsamples,
														labels_hash => $parameter_hash,
														user_labels => 0);



}


my ($covn,$resc,$omegaindex,$parn,$size,$means) = tool::frem::get_post_processing_data(model => $model);

my @tvpar = ();
my @cov_reference = ();
my @cov_units=();

my @cov_rescale = @{$resc};
my @covnames = @{$covn};
my @parnames = @{$parn};
my @cov_means = @{$means};
my $npar = scalar(@parnames);

my ($cov_5th,$cov_95th,$id_covariate_vectors,$categorical,$categoryinfo) = 
	tool::frem::read_covdata(covnames => \@covnames,
							 filename => $options{'frem_dataset'});


for (my $i=0; $i<scalar(@covnames); $i++){
	my $cn = $covnames[$i];
	if ($categorical->[$i]){
		push(@cov_reference,$categoryinfo->{$cn}->{'reference'}); 
		push(@cov_units,'');
	}else{
		push(@cov_reference,$cov_means[$i]);
		if (defined $units{$cn}){
			push(@cov_units,$units{$cn});
		}else{
			push(@cov_units,'');
		}
	}
}

my @labels=(@parnames,@covnames);

if (defined $options{'rawres_input'}){
	my $href;
	my $samples;
	my $offset=1;
	$offset= $options{'offset_rawres'} if (defined $options{'offset_rawres'});
	my @in_filter=();
	if ( defined $options{'in_filter'} ){
		#split string, assume comma separated
		foreach my $filt (split(/,/,$options{'in_filter'})){
			if ($filt =~ /.\.(gt|lt|eq)\.\d+\.?\d*/){
				push(@in_filter,$filt);
			}else{
				die "Input filter $filt does not fulfill the format rules.\n";
			}
		}
		if (scalar(@in_filter)<1){
			die "Error: Option in_filter used, but list of conditions could not be parsed.\n";
		}	
	}

	($sampled_params_arr,$href) = model::get_rawres_params(filename => $options{'rawres_input'},
														   filter => \@in_filter,
														   offset => $offset,
														   model => $model);
}

if (defined $sampled_params_arr) {
	unless (scalar(@{$sampled_params_arr}) >= $minimum) {
		if (defined $options{'in_filter'}) {
		 croak("Too few sets (lines) of parameter values in\n".
				 "rawres file after filtering. Have ".
		scalar(@{$sampled_params_arr})." but need at least $minimum\n");
		} else {
			croak("Too few sets (lines) of parameter values in\n".
			  "rawres file. Have ".scalar(@{$sampled_params_arr}).
			  " but need at least $minimum plus offset\n");
		}
	}
}else{
   croak("get_rawres_params returned undef");
}




chdir($main_directory); #created by tool::get_rundir




my $index=0;
unless (scalar(@labels)==$size){
	croak("size is $size but label count is ".scalar(@labels));
}
#for (my $i=0;$i<$size; $i++){
#	$varheader .= ',STDEV.'.$labels[$i];
#}
#for (my $i=0;$i<$size; $i++){
#	for (my $j=0;$j<$i; $j++){
#		$header .= ',CORREL.'.$labels[$i].'.'.$labels[$j];
#	}
#}
#for (my $i=0;$i<$npar; $i++){
#	for (my $j=$npar;$j<$size; $j++){
#		$header .= ',COEFF.par.'.$labels[$i].'.cov.'.$labels[$j];
#	}
#}

my $id_count = scalar(@{$id_covariate_vectors});

my %coeff_arrays=();
my %variance_arrays=();
my %id_ratio_arrays=();
foreach my $par (@parnames){
	$id_ratio_arrays{$par}={};
	$coeff_arrays{$par}={};
	$coeff_arrays{$par}->{'all'} = [];
	$variance_arrays{$par}={};
	$variance_arrays{$par}->{'none'} = [];
	$variance_arrays{$par}->{'all'} = [];
	foreach my $cov (@covnames){
		$coeff_arrays{$par}->{$cov} = [];
		$variance_arrays{$par}->{$cov} = [];
	}
	for (my $l=0; $l< $id_count; $l++){
		#idnum
		$id_ratio_arrays{$par}->{$id_covariate_vectors->[$l]->[0]}=[];
	}
}





open (my $idfh, '>','id_covdata.csv') or die ("cannot open < id_covdata.csv: $!");
print $idfh 'ID,'.join(',',@covnames)."\n";
for (my $l=0; $l< $id_count; $l++){
	print $idfh join(',',@{$id_covariate_vectors->[$l]})."\n";
}
close $idfh;

open( FILE1, '>pardata.csv' );
print FILE1 'parname'."\n";
for (my $i=0; $i< scalar(@parnames); $i++){
	print FILE1 $parnames[$i]."\n";
}
close FILE1;

open( FILE2, '>covdata.csv' );
print FILE2 'covname,perc5th,mean,perc95th,reference,is.categorical,unit,category.reference,category.other'."\n";
for (my $i=0; $i< scalar(@covnames); $i++){
	my $string = $covnames[$i].','.$cov_5th->[$i].','.$cov_means[$i].','.$cov_95th->[$i].','.$cov_reference[$i].','.$categorical->[$i].','.$cov_units[$i].',';
	if ($categorical->[$i]){
		my $ref = $categoryinfo->{$covnames[$i]}->{'reference'};
		my $other = $categoryinfo->{$covnames[$i]}->{'other'};
		if (defined $categorytext{$covnames[$i]}){
			$string .= $categorytext{$covnames[$i]}->{$ref}.','.$categorytext{$covnames[$i]}->{$other};
		}else{
			$string .= $ref.','.$other;
		}
	}else{
		$string .= ',';
	}
	print FILE2 $string."\n";
}
close FILE2;


	
my @rescale = (1) x $npar;
push(@rescale,@cov_rescale);
unless (scalar(@rescale)==$size){
	croak("length rescale is ".scalar(@rescale)." size is $size");
}

my $ratioheader='sample';
my $varheader='sample';


#1. none
#2. per cov
#3. all
for (my $i=0;$i<$npar; $i++){
	$varheader .= ',CONDVAR.par.'.$labels[$i].'.given.none';
}
for (my $j=$npar;$j<$size; $j++){
	for (my $i=0;$i<$npar; $i++){
		$varheader .= ',CONDVAR.par.'.$labels[$i].'.given.cov.'.$labels[$j];
	}
}
for (my $i=0;$i<$npar; $i++){
	$varheader .= ',CONDVAR.par.'.$labels[$i].'.given.allcov';
}



#1. per cov
#FIXME separate files all, given individual covariates
for (my $j=$npar;$j<$size; $j++){
	my $covindex  = $j-$npar;
	for (my $i=0;$i<$npar; $i++){
		if ($categorical->[$covindex]){
#			$ratioheader .= ',RATIO.par.'.$labels[$i].'.given.reference.'.$labels[$j];
			$ratioheader .= ',RATIO.par.'.$labels[$i].'.given.other.'.$labels[$j];
		}else{
			$ratioheader .= ',RATIO.par.'.$labels[$i].'.given.cov5th.'.$labels[$j];
			$ratioheader .= ',RATIO.par.'.$labels[$i].'.given.cov95th.'.$labels[$j];
		}
	}
}


open( RATIOFILE, '>frem_ratio.csv' );
print RATIOFILE "$ratioheader\n";
open( VARFILE, '>frem_condvar.csv' );
print VARFILE "$varheader\n";

for (my $k=0;$k<=scalar(@{$sampled_params_arr}); $k++){
	if ($k==0){
	#center
#		$model -> update_inits(from_hash => $center_params_arr->[0]);		
	}else{
		$model -> update_inits(from_hash => $sampled_params_arr->[$k-1],
							   match_labels => $match_labels);
	}
	my $varcov = $model->problems->[0]->omegas->[$omegaindex]->get_matrix;
	my $error;
	#my $sdcorr=[]; 
	#my $error =linear_algebra::covar2sdcorr($varcov,$sdcorr);
	#croak("numerr index $k ") unless ($error == 0); 
	
	my $ratiovec = "$k";
	my $variancevec = "$k";
	for (my $i=0;$i<$npar; $i++){
		#		$varheader .= ',CONDVAR.par.'.$labels[$i].'.given.none';
		$variancevec .= ','.$varcov->[$i]->[$i];
		push(@{$variance_arrays{$labels[$i]}->{'none'}},$varcov->[$i]->[$i]);
	}
	my ($error,$cond_covar,$coeff);
	for (my $j=$npar;$j<$size; $j++){ #foreach covariate
		($error,$cond_covar,$coeff) = linear_algebra::conditional_covariance_coefficients(varcov => $varcov,
																						  rescaling => \@rescale,
																						  cov_index_first => $j,
																						  cov_index_last => $j,
																						  par_index_first => 0,
																						  par_index_last => ($npar-1));
		croak("cond covar coeff failed") if ($error != 0);
		my $covindex  = $j-$npar;
		for (my $i=0;$i<$npar; $i++){
			if ($categorical->[$covindex]){
#				$ratioheader .= ',RATIO.par.'.$labels[$i].'.given.other.'.$labels[$j];
#				$ratiovec .= ',1';
				$ratiovec .= ','.exp(($categoryinfo->{$labels[$j]}->{'diff'})*($coeff->[$i]->[0]));
			}else{
			#		$ratioheader .= ',RATIO.par.'.$labels[$i].'.given.cov5th.'.$labels[$j];
			#		$ratioheader .= ',RATIO.par.'.$labels[$i].'.given.cov95th.'.$labels[$j];
				$ratiovec .= ','.exp(($cov_5th->[$covindex]-$cov_means[$covindex])*($coeff->[$i]->[0]));
				$ratiovec .= ','.exp(($cov_95th->[$covindex]-$cov_means[$covindex])*($coeff->[$i]->[0]));
			}
			#		$varheader .= ',CONDVAR.par.'.$labels[$i].'.given.cov.'.$labels[$j];
			$variancevec .= ','.$cond_covar->[$i]->[$i];
			push(@{$variance_arrays{$labels[$i]}->{$labels[$j]}},$cond_covar->[$i]->[$i]);
			if ($k==0){
				push(@{$coeff_arrays{$labels[$i]}->{$labels[$j]}},$coeff->[$i]->[0]);
				#push the parameterization
				my $str = sprintf("%.3E",$coeff->[$i]->[0]).'*('.$covnames[$covindex].'-'.sprintf("%.4g",$cov_means[$covindex]).')';
				push(@{$coeff_arrays{$labels[$i]}->{$labels[$j]}},$str);
			}
		}
	}
	#all covariates
	($error,$cond_covar,$coeff) = linear_algebra::conditional_covariance_coefficients(varcov => $varcov,
																					  rescaling => \@rescale,
																					  cov_index_first => $npar,
																					  cov_index_last => ($size-1),
																					  par_index_first => 0,
																					  par_index_last => ($npar-1));
	croak("cond covar coeff failed") if ($error != 0);
	for (my $i=0;$i<$npar; $i++){
		#	$varheader .= ',CONDVAR.par.'.$labels[$i].'.given.allcov';
		$variancevec .= ','.$cond_covar->[$i]->[$i];
		push(@{$variance_arrays{$labels[$i]}->{'all'}},$cond_covar->[$i]->[$i]);
		if ($k==0){
			push(@{$coeff_arrays{$labels[$i]}->{'all'}},join(',',@{$coeff->[$i]})); # a string
			#push the parameterization
			my $str = '';
			for (my $covindex=0; $covindex<($size-$npar); $covindex++){
				#sign!!!
				if (($covindex >0) and ($coeff->[$i]->[$covindex] > 0)){
					$str .= '+'
				}
				$str .= sprintf("%.3E",$coeff->[$i]->[$covindex]).'*('.$covnames[$covindex].'-'.sprintf("%.4g",$cov_means[$covindex]).')';
			}
			push(@{$coeff_arrays{$labels[$i]}->{'all'}},$str);
		}
#		my $idvec = "$k";
		for (my $l=0; $l<$id_count; $l++){
			#	$idheader .= ',RATIO.id.'.$id_covariate_vectors->[$l]->[0];
			my $num=0;
			for (my $j=0;$j<($size-$npar); $j++){ #foreach covariate
				$num += ($id_covariate_vectors->[$l]->[$j+1]-$cov_reference[$j] )*($coeff->[$i]->[$j]);
			}
#			$idvec .= ','.exp($num);
			push(@{$id_ratio_arrays{$labels[$i]}->{$id_covariate_vectors->[$l]->[0]}},exp($num));
		}

#		print {$parameter_filehandles[$i]} "$idvec\n";
	}

#	for (my $i=0;$i<$size; $i++){
#		$numvec .= ','.($rescale[$i])*($sdcorr->[$i]->[$i]);   #',STDEV.'$lab;
#	}
#	for (my $i=0;$i<$size; $i++){
#		for (my $j=0;$j<$i; $j++){
#			$numvec .= ','.$sdcorr->[$i]->[$j];  #',CORREL.'.$labels[$i].'.'.$labels[$j];
#		}
#	}
	#covariate coefficients
#	for (my $i=0;$i<$npar; $i++){
#		for (my $j=$npar;$j<$size; $j++){
#			# cov(par,cov)/var(cov) plus rescale
#			$numvec .= ','.($varcov->[$i]->[$j])/(($rescale[$j])*($varcov->[$j]->[$j]));
			#',COEFF.par.'.$labels[$i].'.cov.'.$labels[$j];
#		}
#	}

	

#my ($cov_5th,$cov_95th)
	
	print RATIOFILE "$ratiovec\n";
	print VARFILE "$variancevec\n";
#	push(@sdcorr_array,$numvec);
#	last; 
}
close( RATIOFILE );
close( VARFILE );

#my @probs = (0.05,0.10,0.5,0.90,0.95);
my @probs = (0.05,0.95);
my $header = 'ID';

for (my $j=0;$j<($size-$npar); $j++){ #foreach covariate
	$header .= ',cov.'.$covnames[$j];
}


for (my $i=0;$i<$npar; $i++){
	$header .= ','.$parnames[$i].'.observed';
	for (my $l=0; $l<scalar(@probs); $l++){
		$header .= ','.$parnames[$i].'.'.($probs[$l]*100).'th';
	}
}
my $name = 'frem_id_ratios.csv';
my $parfh;
open($parfh,'>',$name) or die "cannot open < $name: $!";
print {$parfh} "$header\n";

for (my $l=0; $l<$id_count; $l++){
	#	$header .= ',RATIO.id.'.$id_covariate_vectors->[$l]->[0];
	#push(@{$id_ratio_arrays{$par}->{$id_covariate_vectors->[$l]->[0]}},exp($num));
	my $idnum = $id_covariate_vectors->[$l]->[0];
	my $idline = $idnum;
	for (my $j=0;$j<($size-$npar); $j++){ #foreach covariate
		$idline .= ','.$id_covariate_vectors->[$l]->[$j+1]; #+1 since 0 is idnum
	}

	for (my $i=0;$i<$npar; $i++){
		my $par = $labels[$i];
		my $observed = shift(@{$id_ratio_arrays{$par}->{$idnum}});
		$idline .= ','.$observed;
		my @sorted = (sort {$a <=> $b} @{$id_ratio_arrays{$par}->{$idnum}}); #sort ascending
		my $quantref = quantile(probs => \@probs, numbers=> \@sorted);
		for (my $k=0; $k< scalar(@probs); $k++){
			$idline .= ','.$quantref->[$k];
		}
	}
	print {$parfh} "$idline\n";
}
close($parfh);


#wikipedia: SD(x) lognormal with mu 0 and sigma :
#exp(0.5*sigma^2)*sqrt(exp(sigma^2)-1)
#estimate is $tvpar[$i]

sub get_cv{
	my $var=shift;
	my $est = shift;
#	return 100*(exp(0.5*$var)*sqrt(exp($var)-1))/$est; #SD/est
	return 100*(exp(0.5*$var)*sqrt(exp($var)-1)); #SD
#	return 100*(exp($var)*(exp($var)-1))/$est; #variance over est
}


@probs = (0.05,0.95);
$header = 'par.conditionedOn,observed.sd,sd.5th,sd.95th';
foreach my $cov (@covnames){
	$header .= ',coeff.'.$cov;
}
$header .= ',parameterization';
$name = 'sd_coefficients_summary.csv';

open($parfh,'>',$name) or die "cannot open < $name: $!";
print {$parfh} "$header\n";
my @types =('none',@covnames,'all');
for (my $i=0;$i<$npar; $i++){
	my $par = $labels[$i];
	for (my $k=0; $k<scalar(@types); $k++){
		my $type = $types[$k];
		my $observed = shift(@{$variance_arrays{$par}->{$type}});
		my $line = $par.'.'.$type.','.sqrt($observed);
		my @sorted = (sort {$a <=> $b} @{$variance_arrays{$par}->{$type}});
		my $quantref = quantile(probs => \@probs, numbers=> \@sorted);
		$line .= ','.sqrt($quantref->[0]);
		$line .= ','.sqrt($quantref->[1]);

		if ($type eq 'none'){
			$line .= ',' x (1+scalar(@covnames)); 
		}elsif($type eq 'all'){
			#				push(@{$coeff_arrays{$labels[$i]}->{'all'}},join(',',@{$coeff->[$i]})); # a string
			$line .= ','.$coeff_arrays{$par}->{'all'}->[0].','.$coeff_arrays{$par}->{'all'}->[1];
		}else{
			$line .= ','x $k ; #1 or more
			$line .= $coeff_arrays{$par}->{$type}->[0];
			$line .= ','x (scalar(@covnames)-$k) ;
			$line .= ','.$coeff_arrays{$par}->{$type}->[1];
		}
			
		print {$parfh} "$line\n";
	}
}
close($parfh);

#cp ID ratio and projectFun
my $localdir='/home/kajsa/kod-psn/rplotsRepo/code/frem';
unless (-d $localdir){
	$localdir=$PsN::lib_dir.'/R-scripts';
}
cp($localdir.'/ID_ratio_function.R','.');
cp($localdir.'/parameter_ratio_function.R','.');
$name = 'rplotfrem.R';
$parfh;
open($parfh,'>',$name) or die "cannot open < $name: $!";
my $code = <<'EOF';
inTable_frem <- read.csv('frem_ratio.csv',header = T, as.is = T)
frem_id <- read.csv('frem_id_ratios.csv', header = T, as.is = T)
covdata <- read.csv('covdata.csv',header = T, as.is = T)
pardata <- read.csv('pardata.csv',header = T, as.is = T)
# Use ID_ratio function
source("ID_ratio_function.R")
ID_ratio(frem_id,covdata,pardata)
#ID_ratio(frem_id,covdata,pardata,"svg") #this requires library(svglite), not on cluster
#ID_ratio(frem_id,covdata,pardata,"jpg") 
# Use Ratios function
source("parameter_ratio_function.R")
parameter_ratio(inTable_frem,covdata,pardata)
#parameter_ratio(inTable_frem,covdata,pardata,"pdf")
EOF
print {$parfh} $code."\n";
close($parfh);

system("R CMD BATCH $name");
