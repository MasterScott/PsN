#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use Cwd;
use OSspecific;
use ui;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ('covariates:s');
my %optional_options = ( 
#	'dv:s' => undef,
#	'vpc!' => undef,
	'check!' => undef,
	'rescale!' => undef,
#	'estimate_regular_final_model!' => undef,
	'estimate_means!' => undef,
	'categorical:s' => undef,
	'deriv2_nocommon_maxeta:i' => undef,
	"mceta:i"=>'',
	'log:s' => undef,
	'rse:f' => undef,
	'run_sir!' => undef,
	'mu' => undef,
	'cholesky!' => undef,
#	'skip_etas:i' => undef
	'skip_omegas:s' => undef
);

my $res = GetOptions( \%options,
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );
exit unless $res;


my %help_text;

$help_text{Pre_help_message} = <<'EOF';
    Full Random Effects Model
EOF

$help_text{Description} = <<'EOF';      
The frem program is an aid to the method described in 
A full model approach based on the covariance matrix of parameters and covariates, 
PAGE 21 (2012) Abstr 2455, M Karlsson. 

The program step by step builds a model with full random effects. 
EOF

$help_text{Examples} = <<'EOF';      
frem run1.mod -covariates=WT,SEX,DGRP -categorical=SEX,DGRP
EOF
$help_text{Options} = <<'EOF';      
	A model file is required as argument.

      The following options are valid:
EOF

$help_text{-h} = <<'EOF';
      -h | -?
      
      With -h or -? frem will print a list of options and exit.
EOF
      
$help_text{-help} = <<'EOF';      
      -help
      
      With -help frem will print this, longer, help message.
EOF

$help_text{-mu} = <<'EOF';
      -mu

Default not used. If set then use mu-modelling for frem-added covariate
THETAs and ETAs.
EOF

$help_text{-covariates} = <<'EOF';
      -covariates=list

A comma-separated list of covariates, required.
Names used in $INPUT.
EOF
$help_text{-categorical} = <<'EOF';
      -categorical=list

A comma-separated list of the covariates that are categorical.
Names used in $INPUT.
EOF
$help_text{-log} = <<'EOF';
      -log=list

A comma-separated list of the covariates that should be log-transformed.
Names used in $INPUT.
EOF

$help_text{-skip_omegas} = <<'EOF';
      -skip_omegas=list

      A comma-separated list of the $OMEGA records that should be excluded when covariances
      between original model ETAs and new covariate ETAs are estimated. Numbering starts at 1.
      Numbering goes strictly by the text $OMEGA in the control stream, without concern
      about the type or size of the record. OMEGAs for BOV ETAs will be automatically skipped,
      even if option -skip_omegas was not set.
EOF

$help_text{-rse} = <<'EOF';
      -rse=number

Default 30 \%.
If the covariance step of both Model 4 and either/both of Model 1 and Model 2 fails, then
this is the guess of relative standard error that will be used for parameters for which there is no other
information that can be used to guess the variance needed for 
a proposal density for a sir run with Model 4.
EOF

$help_text{-deriv2_nocommon_maxeta} = <<'EOF';
    -deriv2_nocommon_maxeta=N

Default 60. If the number of ETAs in model 2 is larger than this number then 
$ABBREVIATED DERIV2=NOCOMMON
will be set in the control stream.
EOF

#$help_text{-estimate_regular_final_model} = <<'EOF';
#    -estimate_regular_final_model
#
#Default set. If set then script will estimate the final regular parameterization frem model, 
#otherwise the model will be created but not estimated.
#EOF

$help_text{-estimate_means} = <<'EOF';
    -estimate_means

Default set. By default frem will estimate the mean values of the covariates which have any 
missing observations in the FREM dataset. Note that the FREM dataset contains covariate 
observations only from the first original data observation record for each individual.
If no covariate observations are missing in the frem dataset then the mean will not be estimated,
even if option -estimate_means is set. If -no-estimate_means is set, frem will not estimate 
any means even if there are missing observations.
EOF

$help_text{-cholesky} = <<'EOF';
    -cholesky

Default not set. If set then script will create and estimate Model 5 and Model 6.
EOF

#$help_text{-vpc} = <<'EOF';
#      -vpc

#      Default not set. If set then script will create a frem model that
#can be run with the vpc script (in a separate call to the vpc
#script).
#EOF

$help_text{-mceta} = <<'EOF';      
      -mceta=N

      Default not set.
      Only allowed when NM7.3 or later and the last estimation method accepts MCETA. 
      Set MCETA=N in last $ESTIMATION.
EOF

$help_text{-check} = <<'EOF';
      -check

Default not set. Run evaluation with frem records ignored after frem data set 
generation, to check ofv is the same.
EOF

$help_text{-rescale} = <<'EOF';
      -rescale

      Rescale covariates in frem dataset to sd=1.
      This option is set by default
EOF

$help_text{-run_sir} = <<'EOF';
      -run_sir

      Default not set. If set and covariance step of Model 4 fails, run sir
      to obtain standard errors of parameters.
EOF

$help_text{Post_help_message} = <<'EOF';
    Also see 'psn_options -h' for a description of common PsN options.
EOF

common_options::online_help( 'frem', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'frem' ); #get defaults, 
#calls set_globals etc, initiates random sequence

$options{'rescale'} = 1 if not defined $options{'rescale'};

## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "An input model file must be specified. Use 'frem -h' for help.\n";
  die;
}

if( scalar(@ARGV) > 1 ){
  print "FREM can only handle one modelfile, you listed: ",join(',',@ARGV),". Use 'frem -h' for help.\n";
  die;
}



require model;

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
			   filename                    => $ARGV[0],
			   ignore_missing_output_files => 1);

require input_checking;
input_checking::check_options(tool => 'frem', options => \%options, model => $model);


require tool::frem;

my $frem = tool::frem->new( eval( $common_options::parameters ),
							models	     => [ $model ],
							top_tool           => 1,
							covariates => $options{'covariates'},
							categorical => $options{'categorical'},
#							estimate_regular_final_model => $options{'estimate_regular_final_model'},
							estimate_means => $options{'estimate_means'},
							cholesky => $options{'cholesky'},
							deriv2_nocommon_maxeta => $options{'deriv2_nocommon_maxeta'},
							log => $options{'log'},
							rse => $options{'rse'},
							mu => $options{'mu'},
							skip_omegas => $options{'skip_omegas'}, 
							check => $options{'check'}, 
							mceta => $options{'mceta'},
							rescale => $options{'rescale'}, 
							vpc => $options{'vpc'}, 
							run_sir => $options{'run_sir'}, 
#							dv => $options{'dv'}
	); 

$frem-> print_options (cmd_line => $cmd_line,
		      toolname => 'frem',
		      local_options => [keys %optional_options],
		      common_options => \@common_options::tool_options);

   
$frem -> run;

if ($frem->vpc and -e $frem->directory.'frem_vpc.mod'){
	ui -> print( category => 'frem',
				 message => "The prepared frem vpc model is ".$frem->directory."frem_vpc.mod\n" );
}

#$frem -> prepare_results;
#$frem -> print_results; #only for frem_results.csv
ui -> print( category => 'frem',
	     message => "frem done\n" );

