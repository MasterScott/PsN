#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use Cwd;
use OSspecific;
use ui;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ('covariates:s');
my %optional_options = ( 
#	'dv:s' => undef,
	'vpc!' => undef,
	'check!' => undef,
	'estimate_regular_final_model!' => undef,
	'estimate_cholesky_final_model!' => undef,
	'categorical:s' => undef,
	'log:s' => undef,
#	'skip_etas:i' => undef
	'skip_omegas:s' => undef
);

my $res = GetOptions( \%options,
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );
exit unless $res;

common_options::setup( \%options, 'frem' ); #get defaults, 
#calls set_globals etc, initiates random sequence

my %help_text;

$help_text{Pre_help_message} = <<'EOF';
    Full Random Effects Model
EOF

$help_text{Description} = <<'EOF';      
The frem program is an aid to the method described in 
A full model approach based on the covariance matrix of parameters and covariates, 
PAGE 21 (2012) Abstr 2455, M Karlsson. 

The program step by step builds a model with full random effects. 
If option -vpc is set then script will prepare model that can be run with vpc.

The main run directory will contain the frem_vpc model and frem_vpc
dataset, if option -vpc was set. The m1 subdirectory of the frem run 
directory will contain all other generated models, lst-files for 
the estimated models, and dataset 2 (the frem dataset).
EOF

$help_text{Examples} = <<'EOF';      
frem run1.mod -covariates=WT,SEX,DGRP -vpc -no-check
EOF
$help_text{Options} = <<'EOF';      
	A model file is required as argument.

      The following options are valid:
EOF

$help_text{-h} = <<'EOF';
      -h | -?
      
      With -h or -? frem will print a list of options and exit.
EOF
      
$help_text{-help} = <<'EOF';      
      -help
      
      With -help frem will print this, longer, help message.
EOF

$help_text{-covariates} = <<'EOF';
      -covariates=list

A comma-separated list of covariates, required.
Names used in $INPUT.
EOF

$help_text{-dv} = <<'EOF';
      -dv=column

      Default is DV. The name of the dependent variable. Name
used in $INPUT.
EOF
$help_text{-skip_omegas} = <<'EOF';
      -skip_omegas=list

      A comma-separated list of the $OMEGA records that should be excluded when covariances
      between original model ETAs and new covariate ETAs are estimated. Numbering starts at 1.
      Numbering goes strictly by the text $OMEGA in the control stream, without concern
      about the type or size of the record. OMEGAs for BOV ETAs will be automatically skipped,
      even if option -skip_omegas was not set.
EOF

$help_text{-vpc} = <<'EOF';
      -vpc

      Default not set. If set then script will create a frem model that
can be run with the vpc script (in a separate call to the vpc
script).
EOF

$help_text{-check} = <<'EOF';
      -check

      Set by default, disable with -no-check. Run safety check after
data set 2 generation.
EOF

$help_text{Post_help_message} = <<'EOF';
    Also see 'psn_options -h' for a description of common PsN options.
EOF

common_options::online_help( 'frem', \%options, \%help_text, \%required_options, \%optional_options);

## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "An input model file must be specified. Use 'frem -h' for help.\n";
  die;
}

if( scalar(@ARGV) > 1 ){
  print "FREM can only handle one modelfile, you listed: ",join(',',@ARGV),". Use 'frem -h' for help.\n";
  die;
}



require model;

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
			   filename                    => $ARGV[0],
			   ignore_missing_output_files => 1);

require input_checking;
input_checking::check_options(tool => 'frem', options => \%options, model => $model);


require tool::frem;

my $frem = tool::frem->new( eval( $common_options::parameters ),
							models	     => [ $model ],
							top_tool           => 1,
							covariates => $options{'covariates'},
							categorical => $options{'categorical'},
							estimate_regular_final_model => $options{'estimate_regular_final_model'},
							estimate_cholesky_final_model => $options{'estimate_cholesky_final_model'},
							log => $options{'log'},
							skip_omegas => $options{'skip_omegas'}, 
							check => $options{'check'}, 
							vpc => $options{'vpc'}, 
#							dv => $options{'dv'}
	); 

$frem-> print_options (cmd_line => $cmd_line,
		      toolname => 'frem',
		      local_options => [keys %optional_options],
		      common_options => \@common_options::tool_options);

   
$frem -> run;

if ($frem->vpc and -e $frem->directory.'frem_vpc.mod'){
	ui -> print( category => 'frem',
				 message => "The prepared frem vpc model is ".$frem->directory."frem_vpc.mod\n" );
}

#$frem -> prepare_results;
#$frem -> print_results; #only for frem_results.csv
ui -> print( category => 'frem',
	     message => "frem done\n" );

