#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use model;
use tool::sir;
use strict;
use ui;
use Getopt::Long;
use common_options;
use Cwd;

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

## Declare the options
my %options;

my %required_options = ("samples:s"=>'',
						"resamples:s"=> '');
my %optional_options = (
	"covmat_input:s"=>'',
	'rawres_input:s' => undef,
	'auto_rawres:f' => undef,
	'offset_rawres:i' => undef,
	'problems_per_file:i' => undef,
	'in_filter:s' => undef,
	"mceta:i"=>'',
	"inflation:f" => '',
	"with_replacement!"=>'',
	"recenter!"=>'',
	"boxcox!"=>'',
	"copy_data!"=>'');

my $res = GetOptions( \%options, 
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );

exit unless $res;

common_options::setup( \%options, 'sir' ); #calls set_globals etc, initiates random sequence


my %help_text;
$help_text{Pre_help_message} = <<'EOF';  
      Sampling Importance Resampling.
EOF
    $help_text{Description} = <<'EOF';
The sir program calculates uncertainty on model parameters for the input
model using the Sampling Importance Resampling (SIR) procedure. The SIR
procedure is described in 

Application of Sampling Importance Resampling to estimate parameter 
uncertainty distributions, PAGE 22 (2013) Abstr 2907,
Dosne AG, Bergstrand M, Karlsson MO.

First, parameter vectors will be simulated from the truncated multivariate
normal distribution given by the covariance matrix output from NONMEM’s
covariance step (or, if NONMEM’s covariance step was not successful, a faked
NONMEM covariance matrix). Alternatively, a file with simulated parameter
vectors can be given directly as input and this simulation is skipped. The last
approach is useful when it is difficult to obtain a (faked) covariance matrix.

Second, each of the simulated parameter vectors will be evaluated on the
original data (MAXEVAL=0). 

Third, based on these evaluations, weights will be calculated for each 
of the parameter vectors and the vectors will be
resampled according to these weights. 

Finally, the uncertainty covariance matrix of the parameters will be 
computed from the resampled parameter vectors.
EOF
    $help_text{Examples} = <<'EOF';
	sir -samples=1000,2000 -resamples=500,1000 run89.mod
EOF

    $help_text{Options} = <<'EOF';
A model file is required as argument. Also, options
-samples and -resamples are required.

      The following options are valid:
EOF

    $help_text{-samples} = <<'EOF';      
      -samples=M1,M2

	A comma-separated list of (usually two) integers,
    the number of parameter vectors to generate in each iteration.
	If option -rawres_input is used, the first integer in the list will
	not be used, but it must still be set so that the list length is equal to
	list -resamples.
EOF

    $help_text{-resamples} = <<'EOF';      
      -resamples=m1,m2

	A comma-separated list of (usually two) integers, the number of parameter vectors 
	to resample in each iteration based on the weights
	computed from delta ofv and the pdf. List length must be equal to list -samples.
EOF
    $help_text{-mceta} = <<'EOF';      
      -mceta=N

      Only allowed when NM7.3 or later and
      a classical estimation method is used. Set MCETA=N in $ESTIMATION.
EOF

$help_text{-rawres_input} = <<'EOF';
      -rawres_input=filename

If rawres_input is given, sir will run an intial 0th iteration in which sir will read all parameter
vectors from this file, starting on line offset_rawres+1 and skipping any that does not fulfill the filter rules, if set.
These vectors will be Box-Cox transformed and used to create a proposal density for the next iteration.
This option is not allowed together with covmat_input. 

If the number of vectors read is smaller than 
the number of estimated parameters (also counting off-diagonals),
it is not possible to obtain an empirical covariance matrix with full rank.
In this case sir will append copies of the existing vectors, perturbed using the tweak\_inits
functionality, until the resulting set ov vectors has full rank.
If option -auto_rawres=degree is set on the command-line, tweak_inits will be done by 'degree',
otherwise the default degree 0.1 will be used for tweaking.

	  The labels for  THETA/OMEGA/SIGMA 
      in the file must match the labels in the model given as input 
      to sir, the theta columns must be directly followed by the omega columns 
      which must be directly followed by the sigma columns, and the first or
	  second column must have header model. Note that is is 
      possible to generate a file with initial parameter estimates outside 
	  of PsN, as long as the file follows the format rules.
EOF
$help_text{-offset_rawres} = <<'EOF';
      -offset_rawres=N

      Only relevant in combination with rawres_input. Default 1.
      The number of result lines to skip in the input raw results file
      before starting to read final parameter estimates. In a regular
      bootstrap raw_results file the first line of estimates refers to the
      input model with the full dataset, so therefore the default offset is 1.
EOF

$help_text{-in_filter} = <<'EOF';
      -in_filter=comma-separated list of conditions

      Only relevant in combination with rawres_input. Default not used.
      The parameter estimates lines in the file can be filtered on values 
      in the different columns. When specifying which column(s) the filtering 
      should be based on, the exact column name must be used, 
      e.g. minimization_successful. Filtering can only be based on columns 
      with numeric values. The allowed relations are .gt. (greater than), 
      .lt. (less than) and .eq. (equal to). Conditions are separated with commas. 
      If the remaining number of lines after filtering is smaller than -samples, 
      sir will stop with an error message. Then the user must either change the 
      filtering rules or change -samples. If the user has created a file with 
      parameter estimates outside of PsN, filtering can be done on any numeric 
      column in that file. Do not set column headers containing .eq. or .lt. 
      or .gt.in the user-generated file as this would interfere with the in_filter 
      option syntax.
    
      Example: -in_filter=minimization_successful.eq.1,significant_digits.gt.3.5
EOF
$help_text{-auto_rawres} = <<'EOF';
      -auto_rawres=degree

Default not set. Not allowed in combination with covmat_input. If rawres_input is not set,
this option will make sir use the tweak_inits functionality to automatically create a 
rawres_input file with perturbed parameter vectors. If option -auto_rawres is used
in combination with rawres_input, the 'degree' will be used with tweak_inits
to augment the given rawres_input file until the matrix has full rank.
EOF
    $help_text{-copy_data} = <<'EOF';
      -copy_data
    Default set, can be unset with -no-copy_data. By default, the original
	dataset will be copied to the sir run directory to be used for relevant runs.
	If -no-copy_data is set, the absolute path to the original dataset will be 
	used instead.
EOF
    $help_text{-with_replacement} = <<'EOF';
      -with_replacement
    By default resampling is done without replacement, but if option
	-with_replacement is set, resampling will be done with replacement.
	It is not possible to cap replacement at e.g. 5, replacement will be unlimited.
EOF
    $help_text{-recenter} = <<'EOF';
      -recenter
Default set. If option is set and any sampled parameter vector has a smaller ofv than the original
vector mu of final parameter estimates of the input model, then the mu-vector will be replaced with
the sampled parameter vector with the smallest ofv.
If option is unset using -no-recenter, the original parameter vector will be kept
and a warning will be printed that some vectors had a negative delta-ofv.
EOF
    $help_text{-boxcox} = <<'EOF';
      -boxcox
Default set. If option is set, sir will Box-Cox transform parameter vectors before computing
the covariance matrix used for sampling.
If option is unset using -no-boxcox, no transformation will be performed before computing covariance matrix
used for sampling.
EOF
    $help_text{-covmat_input} = <<'EOF';
      -covmat_input=filename
    Not allowed together with rawres_input. If given, this matrix is
	used for computing the weights and performing the sampling.
EOF
    $help_text{-inflation} = <<'EOF';
      -inflation=X
    Default is 1, which is the same as no inflation. If given, the covariance
	matrix will be multiplied with this number before the parameter vectors
	are sampled from the truncated multivariate normal distribution.
	Inflation is only used in the first iteration.
EOF
    $help_text{-problems_per_file} = <<'EOF';
      -problems_per_file=N
    Default is 100. The number of $PROBLEM per model file when running
	MAXEVAL=0 or similar to get ofv:s for parameter vectors. Setting a higher value
decreases the overhead involved in running each control stream, but increases the 
risk of losing many samples in case a model file crashes. Setting -problems_per_file=1
gives maximum robustness to individual crashes, but also maximum overhead cost.
EOF


    $help_text{Post_help_message} = <<'EOF';
      Also see 'psn_options -h' for a description of common options.
EOF

common_options::online_help('sir',\%options, \%help_text, \%required_options, \%optional_options);


## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "A model file must be specified. Use 'sir -h' for help.\n";
  exit;
}

if( scalar(@ARGV) > 1 ){
  print "sir can only handle one modelfile. Use 'sir -h' for help.\n";
  exit;
}

if ( defined $options{'covmat_input'} ){
	if (defined $options{'rawres_input'}){
		print "Cannot use option -covmat_input together with option -rawres_input.\n";
		die;
	}
	if (defined $options{'auto_rawres'}){
		print "Cannot use option -covmat_input together with option -auto_rawres.\n";
		die;
	}
	#set to global filepath here
	unless (-e $options{'covmat_input'}){
		print "The covmat_input file ".$options{'covmat_input'}." does not exist.\n"; 
		die;
	}
	my ( $dir, $file ) = OSspecific::absolute_path(cwd(), $options{'covmat_input'});
	$options{'covmat_input'} = $dir . $file;
}

if ( defined $options{'rawres_input'} ){
	unless (-e $options{'rawres_input'}){
		print "The rawres_input file ".$options{'rawres_input'}." does not exist.\n"; 
		die;
	}
	my ( $dir, $file ) = OSspecific::absolute_path(cwd(), $options{'rawres_input'});
	$options{'rawres_input'} = $dir . $file;
}
my @in_filter=();

if ( defined $options{'in_filter'} ){
	unless (defined $options{'rawres_input'}){
		print "Cannot use option -in_filter without option -rawres_input.\n";
		exit;
	}
	#split string, assume comma separated
	foreach my $filt (split(/,/,$options{'in_filter'})){
		if ($filt =~ /.\.(gt|lt|eq)\.\d+\.?\d*/){
			push(@in_filter,$filt);
		}else{
			die "Input filter $filt does not fulfill the format rules.\n";
		}
	}
	if (scalar(@in_filter)<1){
		die "Error: Option in_filter used, but list of conditions could not be parsed.\n";
	}	
}



my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
			   filename                    => @ARGV[0],
			   ignore_missing_output_files => 1 );

unless (defined $options{'copy_data'} and (not $options{'copy_data'})) {
    $options{'copy_data'} = 1;
}

unless ($model->copy_data_setting_ok(copy_data => $options{'copy_data'})){
	die("Cannot set -no-copy_data, absolute data file path is too long.");
} 
if (defined $options{'copy_data'} and (not $options{'copy_data'})){
	$model->relative_data_path(0);
}

my @samples = split(/,/,$options{'samples'});
my @resamples = split(/,/,$options{'resamples'});


my $sir = 
	tool::sir->new ( eval( $common_options::parameters ),
					 top_tool => 1,
					 models				     => [ $model ],
					 with_replacement				     => $options{'with_replacement'},
					 samples				     => \@samples,
					 resamples				     => \@resamples,
					 mceta				     => $options{'mceta'},
					 inflation				     => $options{'inflation'},
					 auto_rawres				     => $options{'auto_rawres'},
					 covmat_input			 => $options{'covmat_input'},
					 rawres_input        	=> $options{'rawres_input'},
					 problems_per_file        	=> $options{'problems_per_file'},
					 offset_rawres       	=> $options{'offset_rawres'},
					 recenter       	=> $options{'recenter'},
					 boxcox       	=> $options{'boxcox'},
					 in_filter             => \@in_filter,
					 copy_data                            => $options{'copy_data'}
	);

$sir-> print_options (cmd_line => $cmd_line,
		     toolname => 'sir',
		     local_options => [keys %optional_options],
		     common_options => \@common_options::tool_options);


$sir -> run;
$sir -> prepare_results();
$sir -> print_results();

ui -> print( category => 'sir',
	     message  => "\nsir done.\n");
