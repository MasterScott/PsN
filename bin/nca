#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use ui;
use Cwd;
use OSspecific;
# More PsN dependencies included with require further down

my $first_call = 1;

sub print_option
{
	my $fh = shift;
	my $option_name = shift;
	my $option_value = shift;

	if ($first_call) {
		print $fh "$option_name = $option_value";
		$first_call = 0;
	} else {
		print $fh ", $option_name = $option_value";
	}
}


my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ();
my %optional_options = (
    'samples:i' => undef,
    'idv:s' => undef,
    'rawres_input:s' => undef,
    'offset_rawres:i' => undef,
    'columns:s' => undef,
    'lst_file:s' => undef,
    'msfo_file:s' => undef,
    'dv:s' => undef,
    'keep_estimation!' => undef,
    'noprediction' => undef,
    'sim_model:s' => undef,
    'flip_comments!' => undef,
    'copy_data!' => undef,
    'include_all_columns' => undef,
);

my $res = GetOptions( \%options,
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );
exit unless $res;


if (defined $options{'msfo_file'}){
  if (defined $options{'extra_files'}){
    $options{'extra_files'} .= ','.$options{'msfo_file'};
  }else {
    $options{'extra_files'} = $options{'msfo_file'};
  }
}


my %help_text;

$help_text{Pre_help_message} = <<'EOF';
    Run simulations for use with the ncappc R package
EOF

$help_text{Description} = <<'EOF';
Two modified modelfiles are created, one for generating original data table
output and one for generating simulated data table output. The model
parameters will never be reestimated. Unless an lst- or msfo-file is given
as input or an lst-file is found by replacing .mod with .lst in the
modelfile name, the initial parameter estimates from the modelfile will be
used for the simulations.
EOF

$help_text{Examples} = <<'EOF';
nca run1.mod -samples=1000 -columns=CL,V

Simulate 1000 data sets using run1.mod with the CL and V columns added.
EOF

$help_text{Options} = <<'EOF';
A modelfile must be specified
-samples is by default set to 300.
-columns is probably needed to get data for the desired columns

The following options are valid:
EOF

$help_text{-samples} = <<'EOF';
      -samples=number

      Number of simulated datasets to generate.
      Must be at least 20. Default set to 300.
EOF

$help_text{-idv} = <<'EOF';
      -idv=VARIABLE

      Name of independent variable, optional, default TIME.
EOF

$help_text{-columns} = <<'EOF';
      -columns=VARIABLE1,VARIABLE2,...

			A comma separated list of variables to add to the nca tables.
EOF

$help_text{-copy_data} = <<'EOF';
    -copy_data

    Set by default. Disable with -no-copy_data. By default PsN will copy
    the data file into NM_run1 and set a local path in psn.mod, the actual
    model file run with NONMEM. If -no-copy_data is set, PsN will not copy 
    the data to NM_run1 but instead set a global path to the data file in
    psn.mod. However, NONMEM does not accept a path with more than 80
	characters.
EOF

$help_text{-lst_file} = <<'EOF';
      -lst_file=file

      The nca will update initial parameter estimates in the model to
      the final values in the lst file. Optional parameter.
      Cannot be used together with -msfo_file option nor with a model
      containing a $NONPARAMETRIC record.
EOF

$help_text{-msfo_file} = <<'EOF';
      -msfo_file=file

      The nca will use the NONMEM state defined in the update file.
      Cannot be used together with -lst_file option.
      If the modelfile contains a $NONPARAMETRIC record this parameter
      is required, otherwise it is optional.
EOF

$help_text{-dv} = <<'EOF';
      -dv=VARIABLE

      Name of dependent variable. Default is DV.
      Case sensitive, must be exactly the same case and spelling as in modelfile.
      Maximum of 4 letters because of NONMEM limitation, unless either IPRED or IWRES.
EOF

$help_text{-sim_model} = <<'EOF';
      -sim_model=file

      Use a separate input model for the simulations. 
      See the userguide for details.
EOF

$help_text{-flip_comments} = <<'EOF';
      -flip_comments

      Method for handling user-defined simulation code in the model. If this option is set,
      PsN will create the simulation model by flipping comments (commented lines will be
      uncommented and vice versa) between the tags 
      ;Sim_start 
      and 
      ;Sim_end
      Note that the
      tags must look exactly like that or the editing will fail. After creating
      the simulation model PsN will remove $COV and $TABLE, change SEED, NSUBS 
      and MAXEVAL in $SIM, and add a new $TABLE, but otherwise no changes will be made.
      See the userguide for details.
EOF

$help_text{-keep_estimation} = <<'EOF';
      -keep_estimation
      
      Perform post-hoc evalutaion step for each simulated dataset,
      i.e. keep the $ESTIMATION record and set MAXEVALS to 0. In this case
      variables such as IPRED(F) are based on the re-estimated post-hoc 
      parameters.      
EOF

$help_text{-rawres_input} = <<'EOF';
      -rawres_input=filename

      A simple way to simulate with uncertainty. Instead of using identical parameter 
      estimates for simulation of each new dataset, take parameter estimates from a 
      raw_results.csv file, e.g. from a bootstrap run. The raw results file must 
      contain at least as many samples as the input -samples to nca, the labels for 
      THETA/OMEGA/SIGMA in the file must match the labels in the (simulation) model 
      given as input to nca, the theta columns must be directly followed by the omega 
      columns which must be directly followed by the sigma columns, and the first 
      column must have header model just as a bootstrap raw_results file. Note that 
      is is possible to generate a file with initial parameter estimates outside of 
      PsN, as long as the file follows the format rules.
EOF

$help_text{-offset_rawres} = <<'EOF';
      -offset_rawres=N

      Only relevant in combination with rawres_input. Default 1.
      The number of result lines to skip in the input raw results file
      before starting to read final parameter estimates. In a regular
      bootstrap raw_results file the first line of estimates refers to the
      input model with the full dataset, so therefore the default offset is 1.
EOF

$help_text{-noprediction} = <<'EOF';
      -noprediction
      
      Add NOPREDICTION to the $SIMULATION record of the simulation model
      in addition to ONLYSIMULATION. This option is generally recommended
      with likelihood models for odd type data.
EOF

$help_text{-include_all_columns} = <<'EOF';
      -include_all_columns

			Include all non-skipped columns in $INPUT to the tables
EOF

common_options::online_help('nca', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'nca' ); #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "A model file must be specified.\nUse 'nca -h' for help.\n";
  exit;
}

if( scalar(@ARGV) > 1 ) {
  print "NCA can only handle one modelfile. Check that all options begin with".
      " -.\nUse 'nca -h' for help.\n";die;
  exit;
}

unless (defined $options{'copy_data'} and (not $options{'copy_data'})) {
    $options{'copy_data'} = 1;
}

if (defined $options{'rawres_input'}) {
  my ( $dir, $file ) = OSspecific::absolute_path(cwd(), $options{'rawres_input'});
  $options{'rawres_input'} = $dir . $file;
  unless (-e $options{'rawres_input'}) {
    print "File ".$options{'rawres_input'}." does not exist";
    exit;
  }
  if (defined $options{'msfo_file'}) {
    print "Cannot use options rawres_input and msfo_file together.";
    exit;
  }
}
if (defined $options{'covariance_file'}) {
    print "Cannot use option covariance_file, removed.";
    exit;
}

if (defined $options{'sim_model'}){
  my ($dir, $fil) = OSspecific::absolute_path($options{'sim_model'});

  $options{'sim_model'} = $dir.$fil;
}

require model;
require tool::npc;

my $eval_string = common_options::model_parameters(\%options);

my $model = model->new( eval( $eval_string ),
			   filename                    => $ARGV[0],
			   ignore_missing_output_files => 1,
			   cwres                       => (($options{'dv'} eq 'CWRES') and ($PsN::nm_major_version < 7))  );


my $columns;
if (defined $options{'include_all_columns'}) {
	my $column_array = $model->problems->[0]->inputs->[0]->get_nonskipped_columns;
	$columns = join(",", @$column_array);
	$columns .= ',' if (defined $options{'columns'});
}
if (defined $options{'columns'}) {
	$columns .= $options{'columns'};
}

if (not defined $options{'samples'}) {
    $options{'samples'} = 300;
}

my $nca = tool::npc->new(eval($common_options::parameters),
	  models	         => [ $model ],
	  stratify_on        => $columns,
	  samples            => $options{'samples'},
	  lst_file           => $options{'lst_file'},
	  msfo_file          => $options{'msfo_file'},
	  idv                => ((defined $options{'idv'}) ? $options{'idv'} : 'TIME'),
	  dv                 => $options{'dv'},
	  keep_estimation    => $options{'keep_estimation'},
	  noprediction       => $options{'noprediction'},
	  copy_data          => $options{'copy_data'},
	  rawres_input	     => $options{'rawres_input'},
	  offset_rawres	     => $options{'offset_rawres'},
	  covariance_file    => $options{'covariance_file'},
	  sim_model          => $options{'sim_model'},
	  flip_comments      => $options{'flip_comments'},
	  directory_name_prefix => 'nca',
	  nca				 => 1,
	  );

$nca->print_options (cmd_line => $cmd_line,
		      toolname => 'NCA',
		      local_options => [keys %optional_options],
		      common_options => \@common_options::tool_options);

$nca->run;
$nca->print_results;

ui->print( category => 'nca', message => "nca done\n" );
