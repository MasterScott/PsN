#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use model;
use tool::xv;
use strict;
use ui;
use Getopt::Long;
use common_options;

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

## Declare the options
my %options;

my %required_options = ( "groups:i"=>'' );
my %optional_options = ( );

my $res = GetOptions( \%options, 
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );

exit unless $res;

my %help_text;
$help_text{Pre_help_message} = <<'EOF';
    Cross-validation
EOF
$help_text{Description} = <<'EOF';
    The crossval tools divides the NONMEM data set into 'groups' equally sized
	parts. For each part i, the remaining groups-1 parts are used for estimation,
	and then part i is used for prediction.

	The output is the file xv_result.txt with prediction model OFVs and
corresponding estimation model OFVs.
EOF
$help_text{Examples} = <<'EOF';    
    crossval run1.mod -groups=5
EOF

    $help_text{Options} = <<'EOF';
	A model file is required as argument, and the
	-groups option is also required.

    The following options are valid:
EOF

    $help_text{-h} = <<'EOF';
    -h | -?

    With -h or -? crossval will print a list of options and exit.
EOF

    $help_text{-help} = <<'EOF';
    -help

    With -help crossval will print this, longer, help message.
EOF
$help_text{-groups} = <<'EOF';
      -groups=N

    The number of cross-validation groups in the data set.
EOF


common_options::online_help( 'crossval', \%options, \%help_text, \%required_options, \%optional_options);

common_options::setup( \%options, 'crossval' ); #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "A model file must be specified.\n";
  exit;
}

if( scalar(@ARGV) > 1 ){
  print "crossval can only handle one modelfile, you listed: ",join(',',@ARGV),"\n";die;
  exit;
}

unless ( defined $options{'groups'} ){
  print "groups must be given\n" ;
  exit;
}

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
			   filename                    => @ARGV[0],
			   ignore_missing_output_files => 1 );

my $xv =  tool::xv_step -> new( eval( $common_options::parameters ),
								nr_validation_groups => $options{'groups'},
								directory_name_prefix => 'crossval',
								top_tool => 1,
								models => [$model],
								subtool_arguments => { modelfit => { eval( $common_options::parameters ),
																	 directory => undef} },
								post_analyze => \&harvest_ofv,
    );

$xv -> run;


sub harvest_ofv{
  my $xv_object = shift;
  
  open XV_REPORT, '>', "xv_result.txt";
  print XV_REPORT "Prediction model OFV's\tEstimation model OFV's\n";
  for( my $i = 0; $i <= $#{$xv_object -> prediction_models}; $i++ ){
    print XV_REPORT $xv_object -> prediction_models -> [$i] -> outputs -> [0] -> ofv  -> [0][0], "\t";
    print XV_REPORT $xv_object -> estimation_models -> [$i] -> outputs -> [0] -> ofv  -> [0][0], "\n";
  }

  close XV_REPORT;
}
