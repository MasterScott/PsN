#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use Cwd;
use common_options;
use ui;
use OSspecific;
use File::Path 'rmtree';
use File::Copy qw/cp mv/;
use include_modules;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join(" ", @ARGV);

my %options;

my %required_options = ();

my %optional_options = (
    "epsilon!" => undef,
    "foce!" => undef,
    "error:s"=> undef,
    "full_block!" => undef,
);

my $res = GetOptions(
    \%options,
    @common_options::get_opt_strings,
    keys(%required_options),
    keys(%optional_options)
);
exit unless $res;

#cannot run setup here, must read config file first

my %help_text;
$help_text{Pre_help_message} = <<'EOF';
  Linearization of a model
EOF

$help_text{Description} = <<'EOF';
    The linearize script is a PsN tool that allows you to automatically create
	a linearized version of a model and obtain the dataset including individual
	predictions and derivatives necessary for further estimation of extensions
	implemented in the linearized model. 

The linearization was developed with the aim to facilitate the development of
nonlinear mixed effects models by establishing a diagnostic method for evalu-
ation of stochastic model components. A full description of the methodology
and itâ€™s performance is presented in 

Use of a linearization approximation facilitating stochastic model building, 
J PKPD (2014) EM Svensson and MO Karlsson. 

The online supplementary material includes a comprehensive code
example. The methodology utilizes first order Taylor expansions and sub-
stantially shortens run times. Examples of extensions that can be evaluated
with the linearized model are addition of inter individual or inter occasion
variability parameters, correlation structures and more complex residual er-
ror models.

Before proceeding with implementation and evaluation of extensions, it
is important to check that the OFV value of the nonlinear and linearized
version of the base model agrees (printed in the command window and in
the linlog.txt file generated in the linearization folder). If the OFV-values
differ more than a few points, this can depend on the occurrence of local
minima in the MAP estimation. See further details in linearize_userguide.pdf.
EOF

$help_text{Examples} = <<'EOF';
linearize run10.mod
EOF

$help_text{Options} = <<'EOF';
	A model file is required as argument.

    The following options are valid:
EOF

$help_text{-h} = <<'EOF';
    -h | -?

    With -h or -? linearize will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';
    -help

    With -help linearize will print this, longer, help message.
EOF

$help_text{-foce} = <<'EOF';
    -foce

    Set by default. Expand around 
    conditional ETA estimates instead of around ETA=0.    
EOF

$help_text{-error} = <<'EOF';
    -error

    Only relevant if -no-epsilon is set. 
    Use an approximated linearization of the error model instead of an exact.

    Alternatives are add (for additive), prop (for proportional) or
    propadd (for proportional plus additive).
    The error model must be defined in a particular way when this option is used,
    see the scm userguide for details.
EOF

$help_text{-epsilon} = <<'EOF';
    -epsilon

    Linearize with respect to epsilons,
    set by default. Disable with -no-epsilon.
EOF

$help_text{-full_block} = <<'EOF';
    -full_block

    Run the linearized model also with full_block
    OMEGA matrix. Disabled by default.
EOF

$help_text{Post_help_message} = <<'EOF';
    Also see 'psn_options -h' for a description of common options.
EOF

common_options::online_help( 'linearize', \%options, \%help_text, \%required_options, \%optional_options);

#calls get_defaults, set_globals etc, initiates random sequence, store tool_options
common_options::setup( \%options, 'linearize' ); 


die "linearize only works with NONMEM7" unless ($PsN::nm_major_version == 7);

if ( scalar( @ARGV ) < 1 ) {
   croak("A model file must be specified. Use linearize -help for help");
}

require file;
require model;
require tool::linearize;

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
						   filename                    => $ARGV[0],
						   ignore_missing_output_files => 1);

my $linearize = tool::linearize->new(
    eval($common_options::parameters),
    models => [$model],
    epsilon => $options{'epsilon'},
    foce => $options{'foce'},
    error => $options{'error'},
    full_block => $options{'full_block'},
);

$linearize->run();
$linearize->print_results();

$linearize->print_options(
    cmd_line => $cmd_line,
    toolname => 'scm',
    local_options => [keys %optional_options],
    common_options => \@common_options::tool_options
);

ui->print(category => 'linearize', message => "\nlinearize done\n");
