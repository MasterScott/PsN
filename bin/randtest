#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use model;
use tool::randtest;
use strict;
use ui;
use Getopt::Long;
use common_options;

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

## Declare the options
my %options;

my %required_options = (
    "samples:i"=>'',
    "randomization_column:s"=> ''
);
my %optional_options = (
    "stratify_on:s"=>'',
    "base_model:s"=>'',
    "update_inits!"=>'',
    "full_model_inits!"=>'',
    "match_transitions!"=>'',
    "copy_data!"=>''
);

my $res = GetOptions( \%options, 
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );

exit unless $res;

common_options::setup( \%options, 'randtest' ); #calls set_globals etc, initiates random sequence


my %help_text;
$help_text{Pre_help_message} = <<'EOF';  
Perform a randomization test.
EOF
$help_text{Description} = <<'EOF';
Randtest is a tool for computing actual significance levels. The method is
described in 

Assessment of Actual Significance levels for Covariate Effects in NONMEM, 
J PKPD 28(3):231-252, Wählby U., Jonsson EN, Karlsson MO.

The program will shuffle the values in the randomization column ’samples’
times and run the input (full) model with each of the new datasets. 
Provided that a base (reduced) model is given as input, the delta-ofv:s will be 
computed and the actual signficance levels will be found
in output file randtest_results.csv.
EOF
$help_text{Examples} = <<'EOF';
      randtest -samples=1000 -randomization_column=DOSE run89.mod -base_model=run0.mod
EOF

$help_text{Options} = <<'EOF';
      A model file is required as argument, and options -samples and
	-randomization_column are also required. 

The following options are valid:
EOF


$help_text{-base_model} = <<'EOF';      
-base_model

      Run the original data set with this model, to use as reference when computing delta-ofv.
EOF
$help_text{-full_model_inits} = <<'EOF';      
-full_model_inits

     Default false. Only relevant when -update_inits is true. If true, use final estimates from
	 the full model as initial estimates for the randomized data models. If false,
	 final estimates from the base model are used instead.
EOF
$help_text{-update_inits} = <<'EOF';      
-update_inits

      Default true. Update the initial estimates of the 
	  full model to the final estimates from the estimation (lst-file) of either the base model,
	  or, if option -full_model_inits is set, of the full model.
	  If estimates from the base model is used (option -full_model_inits is not set)
	  only update for those parameters that are estimated (non-fix) in the base model AND are found,
	  based on THETA/OMEGA/SIGMA numbering, both in the base and full model.
EOF
$help_text{-samples} = <<'EOF';      
-samples

      The number of randomized datasets to generate.
EOF
$help_text{-match_transitions} = <<'EOF';      
-match_transitions

      Default not used. Alternative method for copying randomization column values from
      one individual to another during shuffling.
EOF
$help_text{-randomization_column} = <<'EOF';      
-randomization_column

    The name of the column where the values are to be shuffled among individuals.
EOF
$help_text{-copy_data} = <<'EOF';
-copy_data
    Default set, unset with -no-copy_data. By default, the base model is run
	with a copy of the dataset in NMrun. If -no-copy_data is used, 
	the data set is not copied to NMrun and an absolute path is used in $DATA.
EOF
$help_text{-stratify_on} = <<'EOF';
-stratify_on=integer|string

      It may be necessary to use stratification in the randomization
      procedure. For example, if the original data consists of two
      groups of patients - say 10 patients with full pharmacokinetic
      profiles and 90 patients with sparse steady state concentration
      measurements - it may be wise to restrict the randomization
      procedure to shuffle within the two groups.
EOF

common_options::online_help('randtest',\%options, \%help_text, \%required_options, \%optional_options);

## Check that we do have a model file
if (scalar(@ARGV) < 1) {
  print "A model file must be specified. Use 'randtest -h' for help.\n";
  exit;
}

if (scalar(@ARGV) > 1) {
  print "randtest can only handle one modelfile. Use 'randtest -h' for help.\n";
  exit;
}

foreach my $required (keys %required_options){
	$required =~ s/:[^:]*$//;
	$required =~ s/!$//;
	unless (defined $options{$required}){
		die("Option $required is required");
	}
}

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
						   filename                    => @ARGV[0],
						   ignore_missing_output_files => 1 );
unless (defined $options{'copy_data'} and (not $options{'copy_data'})) {
    $options{'copy_data'} = 1;
}

unless ( $model -> is_run){
	#we will only run this model if not done already, path length matters only if we run
	unless ($model->copy_data_setting_ok(copy_data => $options{'copy_data'})){
		die("Cannot set -no-copy_data, absolute data file path is too long.");
	} 
	if (defined $options{'copy_data'} and (not $options{'copy_data'})){
		$model->relative_data_path(0);
	}
}


if( $options{'shrinkage'} ) {
  $model -> shrinkage_stats( enabled => 1 );
}

my $base_model;
if (defined $options{'base_model'}){
    $base_model = model->new( eval( $eval_string ),
	      filename => $options{'base_model'},
	      ignore_missing_output_files => 1);
	unless ( $base_model -> is_run){
		unless ($base_model->copy_data_setting_ok(copy_data => $options{'copy_data'})){
			die("Cannot set -no-copy_data, absolute data file path is too long.");
		} 
		if (defined $options{'copy_data'} and (not $options{'copy_data'})){
			$base_model->relative_data_path(0);
		}
	}
}

my $rand = 
	tool::randtest->new( eval( $common_options::parameters ),
						 top_tool => 1,
						 prepend_model_file_name => 1,
						 models				     => [ $model ],
						 samples				     => $options{'samples'},
						 base_model			     => $base_model,
						 match_transitions	             => $options{'match_transitions'},
						 update_inits          	=> $options{'update_inits'},
						 full_model_inits          	=> $options{'full_model_inits'},
						 randomization_column                 => $options{'randomization_column'},
						 stratify_on                          => $options{'stratify_on'},
						 copy_data                            => $options{'copy_data'}
	);

$rand-> print_options (cmd_line => $cmd_line,
		     toolname => 'randtest',
		     local_options => [keys %optional_options],
		     common_options => \@common_options::tool_options);


$rand -> run;
$rand -> prepare_results();
$rand -> print_results();

ui -> print( category => 'randtest',
	     message  => "\nrandtest done.\n");
