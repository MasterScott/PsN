#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use output;
use strict;
use Getopt::Long;
use common_options;
use standardised_output;
use model;

$| = 1; # Make sure autoflush is on

my %options;

my %required_options = ();
my %optional_options = ( 
    'h|?'                       => undef,
    'help'                      => undef,
    'precision:f'               => undef,
);


my $res = GetOptions( \%options,
		      @common_options::get_opt_strings,
		      keys(%optional_options) );

exit unless $res;

common_options::get_defaults(\%options, 'nmoutput2so');

my %defaults;

$defaults{'precision'}                 = 4;

foreach my $opt (keys(%optional_options)) {
  $opt =~ s/[!:|].*//g; #get rid of :s |? :i etcetera
  unless (defined $options{$opt}) {
    $options{$opt} = $defaults{$opt};
  }
}

my %help_text;

$help_text{Pre_help_message} = <<'EOF';
  <h3 class="heading1">nmoutput2so</h3>
    nmoutput2so

    Perl script for creation of a standard output xml file from the nonmem output. 
EOF

$help_text{Options} = <<'EOF';
 Options:

    The options are given here in their long form. Any option may be
    abbreviated to any nonconflicting prefix. 
    
    The following options are valid:
EOF

$help_text{-h} = <<'EOF';
    -h | -?
      
    With -h or -? nmoutput2so will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';
    -help
      
    With -help nmoutput2so will print this, longer, help message.
EOF

$help_text{-precision} = <<'EOF';
    -precision='integer'
    Default 4

    Output precision.
EOF


common_options::online_help('nmoutput2so', \%options, \%help_text, \%required_options, \%optional_options);

if (scalar(@ARGV) != 1) {
  print "A lst file must be specified. Use 'stdoutput -h' for help.\n";
  exit;
}


## Start processing the files
my $outfile = $ARGV[0];

## Check that the output file exist before trying to read it. (To
## avoid displaying the usual cryptic PsN error message).
if (not -e $outfile) {
    die "The file: $outfile does not exist.\n\n";
}

my $output = output->new('filename' => $outfile);

if (not $output->parsed_successfully) {
    die "Unable to read everything from outputfile, parser error message:\n" . $output->parsing_error_message;
}

my $model = model->new(problems => $output->control_stream_problems,
					   filename => 'dummy',
					   is_dummy => 1,
					   ignore_missing_data => 1,
					   ignore_missing_files =>1,
					   ignore_missing_output =>1);


my $so = standardised_output->new(
    output => $output,
    model => $model,
    precision => $options{'precision'},
);

$so->parse;
