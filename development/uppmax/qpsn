#!/bin/bash
# Submit script for PsN jobs.

# Submits a PsN job with suitable batch system parameters


NAME=qpsn
#submitargs="-b y -S /bin/bash -cwd -j y"
submitargs="-p core -n 1"

#should look for $HOME/psn.conf and set email address and account id
#if do not find psn.conf then exit with error
#slurm_account
#email_address
project=`sed -n 's/^slurm_account=//p' $HOME/psn.conf`
email=`sed -n 's/^email_address=//p' $HOME/psn.conf`
nmver='default'
mail="--mail-user=$email --mail-type=ALL"
if [ -z "$email" ] && [ "${email+xxx}" = "xxx" ]; then $mail=''; fi


while true;do
    case "$1" in
        --help|-h)
	    echo ""
            echo "qpsn <PsN command>"
            echo "Example:"
            echo "qpsn execute run12.mod -nm_version=7_12_big -shrinkage"
	    echo ""
	    echo "Before the PsN command you can add -t=<time> to set the"
	    echo "time for the main process to something smaller than 7 days. "
	    echo "-t must have the same format at PsN option -max_runtime, ".
	    echo "i.e. format minutes or hours:minutes:seconds or days-hours."
            echo "Example:"
            echo "qpsn -t=2:0:0 execute run12.mod -nm_version=7_12_big -shrinkage"
	    echo ""
	    echo "OR you can add -local to prevent qpsn from sending the main PsN"
	    echo "process to the slurm queue. This will save you the queueing"
	    echo "time of the main process, but the main process will be killed".
	    echo "automatically after 30 CPU minutes or when you log out."
            echo "Example:"
            echo "qpsn -local execute run12.mod -nm_version=7_12_big -shrinkage"
	    echo ""
            exit 0;;
        *) break;;
    esac
done

model=''
prog=''
local_run=0
if [[ `echo $@|wc -w` -gt 1 ]];then
    argument=$1
    if test `expr match "$argument" '\-t'` -gt 0; then 
	maintime=${argument##-*=}
	submitargs="$submitargs"" -t ""$maintime"
	shift
	#shift to get rid of option and make tool the first
    else
	#if -t was not set then perhaps -local was (incompatible with -t)
	if test `expr match "$argument" '\-local'` -gt 0; then 
	    local_run=1
	    shift
	    #shift to get rid of option and make tool the first
	fi
    fi

    tool=$1
    prog=`type -p $tool`;shift
    #check that prog is not empty, die if it is
    if [ -z "$prog" ]; then 
	 echo "Failed to find the path to PsN program $tool"
	 echo "";
	 exit 1;
    fi


    parafile_set=0
    numnodes=0
    #loop over $@ to see if certain options set
    for option in $@
    do  
#    	echo $option
	if test `expr match "$option" '\-slurm_a'` -gt 0; then 
	project=${option##-*=}
	fi
	if test `expr match "$option" '\-parafile'` -gt 0; then 
	parafile_set=1
	fi
	if test `expr match "$option" '\-node'` -gt 0; then 
	numnodes=${option##-*=}
	fi
	if test `expr match "$option" '\-nm_v'` -gt 0; then 
	nmver=${option##-*=}
	fi
	if test `expr match "$option" '\-th'` -gt 0; then 
	    threads=${option##-*=}
	    #test that not more than 499 threads
	    if [ $local_run -eq 0 ]
		then
		if [ $threads -gt 4999 ]
		then
		    echo "You must not set -threads greater than 4999 if not setting -local"
		    echo "";
		    exit 1;
		fi
	    else
		if [ $threads -gt 5000 ]
		then
		    echo "You must not set -threads greater than 5000"
		    echo "";
		    exit 1;
		fi
	    fi
	fi
	if test `expr match "$option" '\-no\-sen'` -gt 0; then 
	mail=''
	fi
	if test `expr match "$option" '\-'` -eq 0; then 
	      model=${option%.mod}
	fi
    done

    nm_version=`grep "$nmver=" $HOME/psn.conf | sed -n 's/[^=]*=\/sw\/apps\///p'  | sed -n 's/,.*//p'`
    #test that not empty version
    if [ -z "$nm_version" ]; then 
	 psn -nm_versions
	 echo "Failed to find NONMEM version $nmver in the above list. Job submission failed."
	 exit 1;
    fi

    parafile_option=' '
    #set parafile if unset and nodes > 1
    if test $numnodes -gt 1; then
	if test $parafile_set -eq 0; then
	    parafile_option=' -parafile=/home/kajsa/PsN/mpilinux8.pnm '
	fi
    fi

    if test $local_run -eq 1; then
	#need stuff for this shell to understand module
	if [ -f /etc/profile.modules ]
	then
	    . /etc/profile.modules
	    module unload gcc
	    module unload intel
	    module unload nonmem
	    module load $nm_version
	fi
	$prog $@ $parafile_option
    else
	if [ -z "$model" ] && [ "${model+xxx}" = "xxx" ]; then 
       	    jobname="$tool"
	else
	    jobname="$tool"_"$model"
	fi
	#direct stderr and stdout to file with suitable name, jobname plus date_time
	datestring=`date +'%b%d-%H:%M:%S'`
	file="$jobname"_"$datestring"
	touch $file
	echo ""
#    echo "submitargs $submitargs"
#    echo "batch script $prog $@"
#    exit
# --qos=short
	sbatch -e $file -o $file -A $project $mail $submitargs -J $jobname <<EOF
#!/bin/bash  -l
module unload gcc
module unload intel
module unload nonmem
module load $nm_version
$prog $@ $parafile_option
EOF
	if test $? -ne 0; then
	    echo ''
	    echo "**** Submission of PsN run failed, check $file for messages"
	else
	    echo "The file $file contains all $tool run messages"
	fi
    fi
else
    echo "$0 requires a PsN command with at least one input argument"
fi
echo ''

