#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib"; #local
use lib '/opt/local64/PsN/PsN_4_5_12'; #cluster

use strict;
use Getopt::Long;
use Cwd;
use PsN;
use model;
use OSspecific;
use File::Copy 'cp';
use File::Glob;
use Math::Random;

#seed 76543 works
#my $lassooptions = ' -pred_ofv_start=100000000000 -min_retries=3 -relations=CL:WGT-2,APGR-2,,V:WGT-2,APGR-2 -stop_t=2';
#my $lassooptions = ' -min_retries=2 -no-normalize -pred_ofv_start=100000000000 -relations=CL:COV1-2,COV2-2,COV3-2,COV4-2,COV5-2,COV6-2,COV7-2,COV8-2,COV9-2,COV10-2';
my $lassooptions = ' -run_final_model -retries=5 -picky -stop_t=4 -log_scale -relations=CL:COV1-2,COV2-2,COV3-2,COV4-2,COV5-2,COV6-2,COV7-2,COV8-2,COV9-2,COV10-2 ';

sub absolute_pred_err{
	my $tablename = shift;
	my $ae=undef;
	if (-e $tablename){
		my @values=();
		open(RES,'<'.$tablename);
		foreach my $observation (<RES>) {
			next if ($observation =~ /^\s*TABLE/);
			next if ($observation =~ /^\s*ID/); #ID EVID DV PRED
			chomp $observation;
			$observation =~ s/^\s*//; #necessary, otherwise extra field
			my @items = split(/\s+/,$observation);
			next unless ($items[1] == 0); #EVID!=0
			next if ($items[2] == 0); #DV==0
			push(@values,abs($items[2]-$items[3])/abs($items[2]));
		}
		close(RES);
		if (scalar(@values)> 0){
			$ae=0;
			foreach my $val (sort { $a <=> $b } @values ) {
				$ae += $val;
			}
			$ae = 100*($ae/scalar(@values));
		}
	}
	return $ae;
}

#for testing agains lowriter
#print "res ".absolute_pred_err('test.tab')."\n";
#exit;

sub run_step{
    my $stepcounter = shift;
    my $command=shift;
    my $logfile = shift;
    my $maindir = shift;

    my $donefile = $maindir.'/step_'.$stepcounter.'.done';

    if (not -e $donefile){
		print "\nStep $stepcounter: Running $command\n ...";
		system("echo Step $stepcounter: Running $command ".' >>'.$logfile.' 2>&1');
		system($command.' >>'.$logfile.' 2>&1');
		system("echo Done ".' >'.$donefile);
    }else{
		my $message = "Skipping $command, done file step $stepcounter exists";
		print "$message\n";
		system("echo $message ".' >>'.$logfile.' 2>&1');
    }
}

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ('samples:i'=> '',
#						'true_model:s'=> '',
						'seed:s'=> '',
						'training_data_size:s'=> '',
#						'external_dataset:s'=> '',
						'base_model:s' => '');
my %optional_options =('run_id:i' => '',
					   'extra_options:s'=> '');

my $res = GetOptions( \%options,
		      keys(%required_options),
		      keys(%optional_options) );
exit unless $res;

if( scalar(@ARGV) > 0 ){
  die "No arguments allowed apart from options";
}

foreach my $opt (keys %required_options){
    $opt =~ s/:.*//;
    unless ( defined $options{$opt} ){
		die "option $opt must be given\n" ;
    }
}

my $stepcounter=0;
my $basedir=getcwd();

my $dirname;
if(defined $options{'run_id'}){
    $dirname='prepare_data_'.$options{'run_id'};
}else{
    #find new id
    for (my $id=1; $id<1000000; $id++){
		$dirname='prepare_data_'.$id;
		unless (-d $dirname){
			$options{'run_id'} = $id;
			last;
		}
    }
}
if(defined $options{'extra_options'}){
	$lassooptions .= ' '.$options{'extra_options'}; 
}

mkdir($dirname) unless (-d $dirname);
my $maindir = $basedir.'/'.$dirname;

my $logfile = $maindir.'/logfile.txt';
print "For detailed run progress check $logfile\n";

my $datadir = $maindir.'/data_sets/';
mkdir($datadir) unless (-d $datadir);
my $modeldir1 = $maindir.'/data_sets/start_models/';
mkdir($modeldir1) unless (-d $modeldir1);
my $modeldir2 = $maindir.'/lasso_input_models/';
mkdir($modeldir2) unless (-d $modeldir2);
#my $lassomodeldir=$dirname.'/lasso_runs';
#mkdir($lassomodeldir);
#mkdir($dirname.'/evaluation_models');

#setup datasets
my $model = model -> new (filename  => $options{'base_model'},
						  ignore_missing_output_files => 1,
						  ignore_missing_data => 0);

my ( $junk, $idcol ) = $model -> _get_option_val_pos( name=> 'ID',
													  record_name => 'input',
													  problem_numbers => [1]);
unless (defined $idcol->[0][0]){
	die "Error finding column ID in \$INPUT of model\n";
}
my $data_obj = data->new(filename => $model->datafiles(absolute_path=>1)->[0],
						 idcolumn => $idcol->[0][0],
						 ignoresign => '@',
						 missing_data_token => -99);

my $number=$data_obj->count_ind/$options{'training_data_size'};
my $groups = int($number);
if (($number - $groups) > 0) {
	$groups += 1;
}

random_set_seed_from_phrase( $options{'seed'} );
my @training_data=();
my @external_data=();
my @training_models=();
#FIXME append old id, renumber ascending
for (my $i=1; $i<= $options{'samples'}; $i++){
	my ($subsets,$array) = $data_obj->subsets(bins => $groups);
	$subsets->[0]->filename('training_data_sample'.$i.'.dta');
	$subsets->[0]->directory($datadir);
	$subsets->[0]->_write;
	push(@training_data,$subsets->[0]->full_name);
	$subsets->[1]->filename('external_data_sample'.$i.'.dta');
	$subsets->[1]->directory($datadir);
	for (my $j=2; $j<scalar(@{$subsets}); $j++){
		$subsets->[1] -> merge( mergeobj => $subsets -> [$j] );
	}
	$subsets->[1]->_write;
	push(@external_data,$subsets->[1]->full_name);

	#copy base model
	#set data to training data
	#write copy, same folder?
	push(@training_models,'training_'.$i.'.mod');
	my $sample_model = $model->copy(filename=>$modeldir1.'training_'.$i.'.mod',
									output_same_directory => 1,
									write_copy => 0,
									copy_datafile   => 0,
									copy_output => 0);
	$sample_model->datafiles(new_names =>[$subsets->[0]->full_name],
							 problem_numbers => [1]);
	$sample_model->relative_data_path(1);
	$sample_model->_write();
	
}
	
my $externaldata;

chdir($modeldir1);
#execute on all base models
my @files = <*.mod>;
my $command='execute -retries=10 -no-disp '.join(' ',@files).' -dir=rundir ';
run_step($stepcounter++,$command,$logfile,$maindir);

my @lassomodels=();

for (my $i=1; $i<= $options{'samples'}; $i++){
	my $stem = 'training_'.$i; 
	if (-e $stem.'.lst'){
		my $out = 'sample'.$i.'.mod';
		my $command = 'update_inits '.$stem.'.mod -out=../../lasso_input_models/'.$out;
		run_step($stepcounter++,$command,$logfile,$maindir);
		push(@lassomodels,$out);

	}
}

exit;

for (my $i=1; $i<= $options{'samples'}; $i++){
    my $ssemod = 'mc-alt_1-'.$i.'.';
    if (-e $ssemod.'lst'){
    }
    $ssemod = 'mc-orig-'.$i.'.';
    if (-e $ssemod.'lst'){
		$model = model -> new (filename  => $ssemod.'mod',
							   ignore_missing_output_files => 0);
		$model->update_inits(from_output => $model->outputs->[0]);
		$model -> remove_records( type => 'covariance');
		$model->set_maxeval_zero(need_ofv=> 1);
		$model->datafiles(new_names =>[$externaldata],problem_numbers => [1]);
		$model->relative_data_path(0);
		$model->filename('evaluation_type_sim_sample_'.$i.'.mod');
		$model -> add_records(type => 'table',
							  record_strings => ['ID EVID DV PRED NOAPPEND NOPRINT ONEHEADER FILE=dvpred_type_sim_sample_'.$i.'.tab'],
							  problem_numbers => [1]);
		
		$model->directory($maindir.'/evaluation_models/');
		$model->_write(overwrite => 1);
		
    }
}
unless (scalar(@lassomodels) == $options{'samples'}){

    print "something wrong with sse\n";
}
chdir('../../lasso_runs');

my @coeff_files=();
for (my $i=1; $i<= $options{'samples'}; $i++){
    my $mod = 'sample'.$i.'.mod'; #used inside lasso for naming evaluation model
    if (-e $mod){
		my $dir= 'lasso_1_'.$i;
		my $lassocommand='lasso '.$mod.' -adjusted -adaptive -seed='.($options{'seed'}+$i*111).' -directory='.$dir.
			' '.$lassooptions.' -external_data='.$externaldata;
		run_step($stepcounter++,$lassocommand,$logfile,$maindir);
		push(@coeff_files,$dir.'/lasso_coefficients.csv') if (-e $dir.'/lasso_coefficients.csv');

		my $filename = 'evaluation_type_aal_sample_'.$i.'.mod';
		my $optname = 'optimal_type_aal_sample_'.$i.'.lst';
		my $outname = 'evaluation_updated_type_aal_sample_'.$i.'.mod';
 		if (-e $dir.'/m1/'.$filename){
			if (-e $dir.'/m1/'.$optname){
				chdir($dir.'/m1');
				my $command = 'update_inits '.$filename.' '.$optname.' -out='.$outname;
				system($command.' >>'.$logfile.' 2>&1');
				$model = model -> new (filename  => $outname,
									   ignore_missing_output_files => 1);
				$model->relative_data_path(0);
				$model -> set_records(type => 'table',
									  record_strings => ['ID EVID DV PRED NOAPPEND NOPRINT ONEHEADER FILE=dvpred_updated_type_aal_sample_'.$i.'.tab'],
									  problem_numbers => [1]);
		
				$model->directory($maindir.'/evaluation_models/');
				$model->_write(overwrite => 1);
				chdir('../..');
			}
			cp($dir.'/m1/'.$filename,'../evaluation_models/.');
		}

		my $dir= 'lasso_2_'.$i;
		my $lassocommand='lasso '.$mod.' -adaptive -seed='.($options{'seed'}+$i*111).' -directory='.$dir.
			' '.$lassooptions.' -external_data='.$externaldata;
		run_step($stepcounter++,$lassocommand,$logfile,$maindir);
		push(@coeff_files,$dir.'/lasso_coefficients.csv') if (-e $dir.'/lasso_coefficients.csv');
		$filename = 'evaluation_type_l_sample_'.$i.'.mod';
 		$optname = 'optimal_type_l_sample_'.$i.'.lst';
		$outname = 'evaluation_updated_type_l_sample_'.$i.'.mod';
 		if (-e $dir.'/m1/'.$filename){
			if (-e $dir.'/m1/'.$optname){
				chdir($dir.'/m1');
				my $command = 'update_inits '.$filename.' '.$optname.' -out='.$outname;
				system($command.' >>'.$logfile.' 2>&1');
				$model = model -> new (filename  => $outname,
									   ignore_missing_output_files => 1);
				$model->relative_data_path(0);
				$model -> set_records(type => 'table',
									  record_strings => ['ID EVID DV PRED NOAPPEND NOPRINT ONEHEADER FILE=dvpred_updated_type_l_sample_'.$i.'.tab'],
									  problem_numbers => [1]);
		
				$model->directory($maindir.'/evaluation_models/');
				$model->_write(overwrite => 1);
				chdir('../..');
			}
			cp($dir.'/m1/'.$filename,'../evaluation_models/.');
		}
		$filename = 'evaluation_type_al_sample_'.$i.'.mod';
 		$optname = 'optimal_type_al_sample_'.$i.'.lst';
		$outname = 'evaluation_updated_type_al_sample_'.$i.'.mod';
 		if (-e $dir.'/m1/'.$filename){
			if (-e $dir.'/m1/'.$optname){
				chdir($dir.'/m1');
				my $command = 'update_inits '.$filename.' '.$optname.' -out='.$outname;
				system($command.' >>'.$logfile.' 2>&1');
				$model = model -> new (filename  => $outname,
									   ignore_missing_output_files => 1);
				$model->relative_data_path(0);
				$model -> set_records(type => 'table',
									  record_strings => ['ID EVID DV PRED NOAPPEND NOPRINT ONEHEADER FILE=dvpred_updated_type_al_sample_'.$i.'.tab'],
									  problem_numbers => [1]);
		
				$model->directory($maindir.'/evaluation_models/');
				$model->_write(overwrite => 1);
				chdir('../..');
			}
			cp($dir.'/m1/'.$filename,'../evaluation_models/.');
		}
    }else{
		print "input model $mod for lasso missing for sample $i\n";
    }
}

my @result=();

foreach my $file (@coeff_files){
    $file =~ /^lasso_(\d+)_(\d+)/ ;
    my $ver = $1;
    my $num = $2;
    if (-e $file){
		open (RES,$file);
		my @lines = <RES>;
		close(RES);
		if (scalar(@result)==0){
			#first: add a header
			chomp $lines[0];
			push(@result,'sample,type,'.$lines[0]);
		}
		chomp $lines[1];

		if ($ver == 1){
			#adjusted adaptive, only one row
			push(@result,$num.',aal,'.$lines[1]);
		}else{
			#adaptive, two rows
			push(@result,$num.',l,'.$lines[1]);
			if (scalar(@lines)>2){
				chomp $lines[2] ;
				push(@result,$num.',al,'.$lines[2]);
			}
		}
    }
}

chdir('..');

open(RES,'>final_lasso_coefficients.csv');
foreach my $line (@result){
    print RES $line."\n";
}
close(RES);

#glob for filenames
#execute using join for command
#parse rawres, use model col (index 0) and ofv (index 18)
#print new csv file with results
chdir('evaluation_models');

my @files = <*.mod>;

my $command='execute -no-disp '.join(' ',@files).' -dir=rundir ';
run_step($stepcounter++,$command,$logfile,$maindir);

my $filename = $files[0];
$filename =~ s/mod$/csv/;
open(RES,'<rundir/raw_results_'.$filename);
my @lines = <RES>;
close(RES);
my @ofvs=('model,type,sample,ofv,ae');

for (my $i=1; $i<scalar(@lines); $i++){
	my @fields = split(',',$lines[$i]);
	my $modelnum = $fields[0];
	my $sample=undef;
	my $tablename;
	if ($files[$modelnum-1] =~ /_sample_(\d+)\./){
		$sample = $1;
	}
	my $type = undef;
	if ($files[$modelnum-1] =~ /_type_([a-z0-9]+)_/){
		$type = $1;
		if ($files[$modelnum-1] =~ /_updated_/){
			$tablename = 'dvpred_updated_type_'.$type.'_sample_'.$sample.'.tab';
		}else{
			$tablename = 'dvpred_type_'.$type.'_sample_'.$sample.'.tab';
		}
	}else{
		$tablename = 'dvpred_true.tab';
	}
	my $ae =absolute_pred_err($tablename);
	my $ofv = $fields[19] if (scalar(@fields)>19);
	push(@ofvs,$files[$modelnum-1].','.$type.','.$sample.','.$ofv.','.$ae);
}
chdir('..');
open(RES,'>evaluation_ofv.csv');
foreach my $line (@ofvs){
    print RES $line."\n";
}
close(RES);

print "\nDone\n";
