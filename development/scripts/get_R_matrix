#!/usr/bin/perl

use strict;


unless ((scalar(@ARGV)==1) and (-e $ARGV[0]))   {
	die("input error: first argument should be file name ");

}

open( RRES, $ARGV[0]) or die "could not open ".$ARGV[0];
my @read_file = <RRES>;
close( RRES );

my @labels=();
my %lstlabels;
for (my $th=1; $th<= 18;$th++){
	next if ($th == 12);
	next if ($th == 13);
	next if ($th == 14);
	push(@labels,'THETA'.$th);
	$lstlabels{'TH'.$th}=$#labels;
}

push(@labels,'OMEGA(1,1)');
$lstlabels{'OM0101'}=$#labels;

push(@labels,'OMEGA(3,3)');
$lstlabels{'OM0303'}=$#labels;

push(@labels,'OMEGA(5,5)');
$lstlabels{'OM0505'}=$#labels;

push(@labels,'OMEGA(6,6)');
$lstlabels{'OM0606'}=$#labels;

push(@labels,'OMEGA(7,6)');
$lstlabels{'OM0607'}=$#labels;

push(@labels,'OMEGA(7,7)');
$lstlabels{'OM0707'}=$#labels;


push(@labels,'OMEGA(8,8)');
$lstlabels{'OM0808'}=$#labels;


push(@labels,'OMEGA(9,9)');
$lstlabels{'OM0909'}=$#labels;


push(@labels,'OMEGA(10,10)');
$lstlabels{'OM1010'}=$#labels;


push(@labels,'OMEGA(11,11)');
$lstlabels{'OM1111'}=$#labels;


push(@labels,'OMEGA(12,11)');
$lstlabels{'OM1112'}=$#labels;


push(@labels,'OMEGA(12,12)');
$lstlabels{'OM1212'}=$#labels;

push(@labels,'SIGMA(1,1)');
$lstlabels{'SG0101'}=$#labels;

push(@labels,'SIGMA(2,1)');
$lstlabels{'SG0102'}=$#labels;

push(@labels,'SIGMA(2,2)');
$lstlabels{'SG0202'}=$#labels;




my @matrix=();
for (my $i=0; $i< scalar(@labels); $i++){
	push(@matrix,[(0)x(scalar(@labels))]);
}

my $found=0;
my $parsed=0;
my $index=0;
while ($index < scalar(@read_file)){
	$index++;
	my $line = $read_file[$index];
	if (($line =~ /^ \*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/) and
		($line =~ /  R MATRIX       /)){
		$found=1;
		
	}
	next unless $found;

	if ($line =~ /^\s*(TH|OM|SG)/){

		$line =~ s/(TH)\s+(\d+)/$1$2/g ; #make sure th index attached to TH
		my @text = split(' ',$line);
		$index++;
		my @values = split(' ',$read_file[$index]);
		for (my $k=0; $k< scalar(@values);$k++){
			my $left = $text[$k*3+0];
			my $right = $text[$k*3+2];
			die("bug matching") if ($left eq '|' or $right eq '|');
			my $li = -1;
			my $ri= -1;
			foreach my $key (keys %lstlabels){
				if ($key eq $right){
					$ri = $lstlabels{$key};
				}
				if ($key eq $left){
					$li = $lstlabels{$key};
				}
			}
			die ("could not match $left") if ($li == -1);
			die ("could not match $right") if ($ri == -1);
			$matrix[$ri]->[$li]=$values[$k];
			$matrix[$li]->[$ri]=$values[$k];

		}


	}


	last if ($found and ( $line=~ /^\s*#CPUT/ ));

}

for (my $k=0; $k<scalar(@matrix); $k++){
	for (my $j=0; $j<scalar(@matrix); $j++){
		if ($matrix[$k]->[$j]==0){
			print "\n error element $k $j is 0\n";
		}
	}
}


print '"NAME","'.join('","',@labels).'"'."\n";
for (my $k=0; $k<scalar(@matrix); $k++){
	print '"'.$labels[$k].'",'.join(',',@{$matrix[$k]})."\n";
}
