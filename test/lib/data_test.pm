#!/usr/bin/perl

package data_test;

#use FindBin qw($Bin);
#use lib "$Bin/../lib";
use data;
use Cwd;
use strict;

sub test {
  
  my $self = shift;
  my %parms = @_;
  my $verbose   = $parms{'verbose'};
  my $directory = $parms{'directory'};

  my ($tests_passed, $tests_performed) = (0,0);

  my $data = data -> new( filename => 'data_set_1.dta',
			  directory => $directory.'/files/data_test_dir',
			  idcolumn => 3 );

  
  print "\tdata: testing directory member\t\t\t... " if $verbose;
  {
    my $correct_value = $directory . 'files/data_test_dir/';
    my $real_value = $data -> directory;
    if( $correct_value eq $real_value ){
      print " OK \n" if $verbose;
      $tests_passed ++;
    } else {
      print "FAILED: \n\t$correct_value not equal $real_value\n" if $verbose;
    }
    $tests_performed ++;
  }
  

  print "\tdata: testing full_name\t\t\t\t... " if $verbose;
  {
    my $correct_value = $directory . 'files/data_test_dir/data_set_1.dta';
    my $real_value = $data -> full_name;
    if( $correct_value eq $real_value ){
      print " OK \n" if $verbose;
      $tests_passed ++;
    } else {
      print "FAILED: $correct_value not equal $real_value\n" if $verbose;
    }
    $tests_performed ++;
  }

  print "\tdata: testing bootstrap:ing of data\t\t... " if $verbose;
  {
    srand(1);
    my ( $new_datas, $incl_ids, $incl_keys )
	= $data -> bootstrap( directory => $directory ,
			      name_stub => 'files/data_test_dir/bs_pr' ,
			      samples   => 5,
			      target    => 'mem');
    my $failed = 0;
    foreach my $data ( @{$new_datas} ){
      unless( ref $data eq 'data' ){
	print "FAILED: bootstrap doesn't return data objects\n" if $verbose;
	$failed = 1;
	last;
      }
    }
    $tests_passed ++ unless( $failed );
    $tests_performed ++;
    
    last if ( $failed );
    
# {{{ correct_value 
    my $correct_value  = [[0,0,3.5,0,17.0,25.0,0,3.0,0,3.0,0,0,3.0,0,20.0,3.2,4.0,11.0,4.0,27.0,0,0,3.5,0,25.0,2.5,17.0,6.0,0,7.5,4.0,0,0,15.0,2.4,2.5,2.4,0,0,0,32.0,0,0,0,5.0,0,1.7,0,2.5,22.8,0,3.2,9.0,0,4.5,17.0,0,0,0,0,0,56.0,4.3,60.0,3.3,0,0,0,40.0,0,30.0,0,0,35.0,0,0,0,25.0,0,4.3,0,0,22.0,0,2.5,4.0,1.5,3.0,4.0,0,2.8,0,4.4,0,30.0,0,3.0,25.0,0,15.0,3.3,70.0,0,56.0,0,0,0,0,56.0,0,0,3.4,24.0,3.3,0,0,2.5,26.0,0,2.5,0,7.0,0,0,0,26.0,0,0,0,10.0,3.3,0,34.0,30.0,0,28.0,40.0,0,2.8,0,0,0,0,9.5,60.0,4.0,0,0,0,0,0,0,12.0,0,20.0,3.4,2.8,0,0,0,0,0,0,3.5,0,0,30.0,22.0,15.0,0,0,0,1.5,0,3.0,40.0,0,0,3.0,3.0,4.0,3.0,2.3,0,0,2.5,0,0,3.0,3.5,2.5,2.8,7.5,5.0,18.0,2.8,1.7,3.0,26.0,10.0,10.0,0,0,0,0,1.9,0,20.0,0,0,12.0,7.5,3.0,0,4.0,7.5,35.0,4.4,0,0,56.0,0,0,0,0,19.0,3.8,20.0,18.6,7.5,24.0,9.5,0,2.5,15.0,15.0,0,2.3,0,0,4.5,4.0,0,0,0,0,3.5,3.5,0,22.0,0,0,7.5,30.0,0,3.0,14.0,0,3.0,0,0,22.8,2.5,0,30.0,2.3,0,4.0,0,0,0,0,0,3.2,0,3.5,0,3.0,0,0,19.0,3.5,0,0,10.0,3.5,3.2,0,25.0,4.0,0,4.0,2.8,0,18.6,2.0,10.0,0,26.0,3.5,0,0,9.0,3.0,7.5,2.8,0,11.0,7.5,24.0,2.5,3.5,17.0,5.0,34.0,0,3.0,0,3.3,3.0,35.0,3.0,22.0,6.0,7.5,27.0,11.0,9.0,3.5,0,4.0,24.0,],[0,24.0,1.7,0,0,0,0,19.0,0,10.0,70.0,0,0,11.0,0,0,0,0,2.5,15.0,2.8,0,0,0,0,0,0,0,3.0,2.5,3.5,14.0,2.8,7.5,3.5,9.0,5.0,0,2.0,24.0,3.0,2.3,4.5,5.0,0,19.0,19.0,3.2,0,24.0,0,3.0,30.0,7.5,18.0,2.8,0,15.0,0,0,2.3,14.0,27.0,11.0,5.0,0,0,0,0,0,0,0,0,56.0,0,2.8,25.0,0,15.0,34.0,0,3.7,2.3,0,24.0,35.0,3.0,30.0,0,3.5,17.5,3.0,0,10.0,0,0,0,0,2.4,0,2.5,2.5,0,3.3,26.0,0,12.0,3.0,0,12.0,0,0,0,0,7.5,2.5,11.0,7.5,17.0,0,3.5,0,3.8,0,0,0,0,32.0,10.0,60.0,3.7,3.0,11.0,32.0,0,15.0,3.3,70.0,2.5,0,0,2.5,40.0,15.0,0,18.6,1.5,3.5,0,6.0,0,0,35.0,0,0,24.0,20.0,0,3.0,0,4.0,9.5,1.7,6.0,0,0,18.0,9.5,18.0,0,4.0,0,2.8,0,30.0,0,0,0,17.0,18.0,0,4.0,4.0,15.0,0,0,0,11.0,0,1.5,24.0,0,0,0,1.5,5.0,18.0,2.3,0,40.0,0,0,26.0,0,4.5,0,0,0,28.0,0,2.5,2.0,0,0,2.0,2.0,0,0,0,0,18.6,70.0,17.5,0,9.0,3.5,0,0,0,3.0,0,4.4,0,25.0,10.0,14.0,0,2.8,35.0,2.0,0,0,30.0,0,3.0,0,0,24.0,0,0,0,1.7,0,0,0,0,2.0,2.0,0,15.0,2.5,0,30.0,0,3.5,0,0,0,12.0,22.0,30.0,0,3.3,2.5,0,3.0,2.5,0,0,2.5,4.0,0,0,2.5,0,0,0,5.0,3.2,0,3.5,0,0,28.0,3.3,0,0,0,0,0,2.8,2.5,18.0,30.0,3.5,2.0,0,5.0,28.0,0,0,0,7.0,15.0,18.6,10.0,24.0,0,4.0,0,0,0,0,0,0,24.0,9.0,4.0,15.0,11.0,0,0,],[0,0,19.0,0,0,10.0,0,0,3.0,3.0,0,0,3.5,5.0,0,0,5.0,18.0,0,2.3,0,3.0,3.5,0,0,0,0,0,0,2.3,0,3.5,7.5,2.8,0,0,7.5,4.0,0,6.0,0,0,7.5,0,0,35.0,3.3,0,10.0,12.0,0,3.0,3.0,0,0,3.2,0,2.5,0,4.0,3.0,34.0,20.0,15.0,0,0,4.0,4.0,0,3.0,2.8,25.0,9.0,14.0,0,3.0,28.0,0,7.5,0,14.0,0,0,10.0,3.4,2.5,0,3.7,7.5,0,0,30.0,30.0,3.0,14.0,0,9.5,0,0,15.0,0,2.5,2.3,0,3.2,0,0,3.0,0,5.0,0,0,27.0,4.0,0,0,2.5,2.8,0,2.5,17.0,2.5,3.0,0,0,0,0,0,20.0,2.0,0,3.0,0,0,0,63.0,0,2.8,0,11.0,70.0,70.0,18.0,0,0,3.0,1.7,3.5,9.0,4.3,0,0,4.0,3.0,0,0,19.0,0,60.0,0,26.0,4.4,0,0,0,0,3.5,0,4.0,27.0,0,0,7.5,0,0,0,0,1.5,0,20.0,4.5,3.0,0,2.0,3.5,3.3,2.8,0,0,0,22.0,4.0,27.0,0,0,12.0,19.0,16.0,7.0,0,0,30.0,27.0,0,0,18.6,0,3.0,3.0,30.0,0,0,0,2.8,3.5,0,3.5,2.4,0,0,3.7,1.7,4.0,0,0,0,24.0,1.5,0,7.5,2.0,0,0,3.7,6.0,0,0,0,0,2.0,0,3.0,0,0,27.0,0,2.5,0,0,0,2.0,25.0,0,0,30.0,5.0,0,0,0,0,30.0,4.5,3.7,3.0,4.0,7.5,3.4,3.2,2.8,3.5,2.0,0,0,0,0,26.0,0,0,0,4.0,1.5,1.7,32.0,3.0,17.5,24.0,2.5,2.8,12.0,3.0,70.0,0,6.7,30.0,11.0,0,0,3.0,15.0,26.0,25.0,56.0,18.0,30.0,3.0,25.0,20.0,0,0,0,9.0,0,0,26.0,22.0,0,60.0,0,7.5,3.5,3.5,6.0,0,60.0,0,0,2.8,0,0,0,9.0,24.0,],[3.0,3.0,0,0,14.0,0,24.0,2.8,0,4.0,24.0,3.5,2.8,0,0,0,26.0,0,3.0,0,25.0,3.3,2.5,4.3,3.0,0,0,3.0,11.0,4.0,6.0,26.0,3.3,0,0,0,0,2.5,2.8,0,0,0,6.7,27.0,0,0,0,2.5,0,0,24.0,7.0,0,0,0,0,0,0,70.0,17.5,9.0,5.0,0,0,0,7.5,3.3,0,17.5,0,25.0,2.0,0,0,0,2.8,0,0,0,0,0,2.8,3.3,0,0,16.0,11.0,0,3.0,0,0,25.0,1.7,3.5,34.0,2.5,7.0,3.5,4.0,9.0,0,0,0,0,18.6,3.7,0,0,0,5.0,0,0,0,3.0,0,2.8,0,2.5,2.0,0,2.0,3.0,0,0,0,0,0,3.2,0,2.5,9.5,10.0,0,6.0,0,12.0,18.0,1.7,2.5,0,0,0,0,0,0,0,0,32.0,3.0,3.3,3.0,0,2.3,4.0,3.0,0,15.0,5.0,0,3.5,0,6.0,0,3.0,0,2.0,1.7,0,0,0,0,11.0,0,30.0,30.0,0,0,3.8,6.0,15.0,0,0,3.4,3.7,22.0,7.5,0,0,0,0,7.5,0,7.5,0,0,3.4,0,0,0,3.5,22.0,16.0,0,0,27.0,35.0,0,2.8,9.0,0,0,0,2.4,18.6,24.0,0,2.5,3.2,2.8,18.0,0,3.5,4.3,0,4.4,2.0,0,3.3,0,3.0,2.8,20.0,0,12.0,0,2.5,3.5,0,0,0,0,2.0,4.0,2.3,40.0,25.0,3.5,9.0,0,7.5,10.0,3.0,24.0,2.0,20.0,0,28.0,18.0,0,0,9.0,3.3,5.0,3.0,0,0,0,3.5,12.0,0,0,1.5,3.4,0,0,26.0,3.0,4.0,6.0,3.3,0,10.0,4.5,18.0,3.0,0,0,0,3.0,0,0,3.0,0,0,2.5,0,0,7.5,20.0,24.0,0,0,3.5,0,0,0,3.5,0,17.5,2.5,3.0,0,5.0,20.0,4.4,0,24.0,2.0,12.0,0,0,0,0,24.0,0,2.4,2.5,0,0,0,0,0,],[1.7,5.0,0,0,0,2.0,0,0,22.8,7.0,14.0,3.0,17.0,0,0,0,26.0,0,1.7,0,0,2.8,3.3,0,26.0,0,1.9,0,7.5,0,0,3.4,2.5,0,0,3.4,0,26.0,3.5,0,0,3.0,0,0,0,2.8,0,7.5,7.5,4.0,22.0,17.5,0,6.0,0,0,0,0,0,35.0,19.0,3.4,0,3.5,0,0,3.2,2.5,3.5,7.5,6.0,3.0,17.5,0,0,2.5,6.0,0,0,0,4.5,2.5,9.5,0,25.0,60.0,35.0,17.0,15.0,0,0,0,6.0,3.0,22.0,0,18.0,7.5,0,3.0,4.5,18.6,1.5,10.0,1.7,4.0,2.4,14.0,0,2.0,4.0,0,0,3.5,28.0,4.0,7.5,3.0,3.0,0,0,7.5,0,0,26.0,0,0,9.0,4.0,0,0,7.5,2.4,70.0,0,0,0,10.0,3.5,0,30.0,3.7,0,0,3.5,9.5,4.0,0,0,7.5,0,9.5,0,0,2.5,0,0,19.0,2.8,70.0,0,6.0,0,2.4,3.5,0,3.0,14.0,20.0,0,3.3,0,0,0,4.0,0,4.0,0,0,1.5,14.0,9.5,0,24.0,9.0,0,2.5,20.0,0,2.0,7.5,0,0,3.0,0,0,25.0,0,6.0,0,3.0,0,0,0,34.0,0,0,24.0,0,0,2.5,9.0,20.0,3.5,0,0,0,0,0,0,0,0,2.8,9.0,0,4.0,0,70.0,11.0,0,0,0,18.0,7.5,0,0,0,27.0,2.8,2.5,0,0,6.0,0,0,3.5,28.0,0,0,2.5,0,17.0,20.0,0,1.5,3.0,0,0,3.0,1.7,0,2.5,0,4.5,2.5,0,0,0,0,3.4,3.4,0,0,0,0,25.0,0,0,3.0,4.4,3.5,0,34.0,27.0,0,4.0,0,0,3.0,2.5,0,0,4.4,6.0,0,15.0,2.5,0,0,26.0,0,0,0,1.7,0,0,0,1.7,4.4,0,20.0,27.0,0,0,0,0,3.0,1.7,4.3,17.5,7.5,0,0,5.0,22.8,2.0,12.0,0,3.0,10.0,5.0,27.0,],];
# }}}

    $failed = 0;
#    print "[";
  OUTER: for(my $i = 0; $i <= $#{$incl_ids}; $i++ ){
      my $ids_inner = $incl_ids -> [$i];
#      print "[";
      for(my $j = 0; $j <= $#{$ids_inner};$j++){
#	print $ids_inner -> [$j] , ",";
	if( $ids_inner -> [$j] != $correct_value -> [$i] -> [$j] ){
	  print $ids_inner -> [$j], " ",  $correct_value -> [$i] -> [$j] , "\n";
	  print "FAILED: bootstrap doesn't include the correct IDs\n" if $verbose;
	  $failed = 1;
	  last OUTER;
	}
      }
#      print "],";
    }
#    print "]";

    $tests_passed ++ unless( $failed );
    $tests_performed ++;

    last if ( $failed );

    print " OK \n";
    #print "\n", @{@{$incl_ids}[0]}, "\n", @{$incl_keys}, "\n";
  }

# resample

# case_deletion

# copy

# count_ind

# fractions

# factors

# find_individual

# format_data

# have_missing_data

# merge

# max

# min

# median

# mean

# sd

# range

# recalc_column

# renumber_ascending

# renumber_descending

# subsets

# subset

# _write

# flush

# synchronize

# _fisher_yates_shuffle

# _read_first_individual

# _read_header

# _read_individual

  return ( $tests_passed, $tests_performed );

}
  
1;
